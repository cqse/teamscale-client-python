# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class TestImpactAnalysisApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_impacted_tests(self, project, end, **kwargs):  # noqa: E501
        """Get impacted tests  # noqa: E501

        Returns an ordered list of test clusters that are impacted by the given changes. The returned list of test clusters is a subset of the tests given in the request body. Clusters of selected and prioritized tests are formed based on the clustering information given in the request body. The tests from the request body are furthermore used to determine if any tests have changed or new tests were added. These are always included in the returned list of impacted tests. This service is public API since Teamscale 5.7. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_impacted_tests(project, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str end: The end timestamp (inclusive). (required)
        :param str baseline: The baseline timestamp (inclusive).
        :param list[str] partitions: This parameter may be given multiple times. Specifies the test coverage partitions to consider.
        :param str prioritization_strategy: The name of the test prioritization strategy
        :param bool ensure_processed: If set to true the request will fail with '412 PRECONDITION FAILED' if the exact given end commit has not been processed yet and therefore data may not be up-to-date.
        :param bool include_non_impacted: Append and prioritize non-impacted tests after impacted tests
        :param bool include_failed_and_skipped: Append and prioritize previously failed and skipped tests before impacted tests.
        :param list[ClusteredTestDetails] clustered_test_details:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[PrioritizableTestCluster]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_impacted_tests_with_http_info(project, end, **kwargs)  # noqa: E501

    def get_impacted_tests_with_http_info(self, project, end, **kwargs):  # noqa: E501
        """Get impacted tests  # noqa: E501

        Returns an ordered list of test clusters that are impacted by the given changes. The returned list of test clusters is a subset of the tests given in the request body. Clusters of selected and prioritized tests are formed based on the clustering information given in the request body. The tests from the request body are furthermore used to determine if any tests have changed or new tests were added. These are always included in the returned list of impacted tests. This service is public API since Teamscale 5.7. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_impacted_tests_with_http_info(project, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str end: The end timestamp (inclusive). (required)
        :param str baseline: The baseline timestamp (inclusive).
        :param list[str] partitions: This parameter may be given multiple times. Specifies the test coverage partitions to consider.
        :param str prioritization_strategy: The name of the test prioritization strategy
        :param bool ensure_processed: If set to true the request will fail with '412 PRECONDITION FAILED' if the exact given end commit has not been processed yet and therefore data may not be up-to-date.
        :param bool include_non_impacted: Append and prioritize non-impacted tests after impacted tests
        :param bool include_failed_and_skipped: Append and prioritize previously failed and skipped tests before impacted tests.
        :param list[ClusteredTestDetails] clustered_test_details:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[PrioritizableTestCluster], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'end',
            'baseline',
            'partitions',
            'prioritization_strategy',
            'ensure_processed',
            'include_non_impacted',
            'include_failed_and_skipped',
            'clustered_test_details'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_impacted_tests" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `get_impacted_tests`")  # noqa: E501
        # verify the required parameter 'end' is set
        if self.api_client.client_side_validation and ('end' not in local_var_params or  # noqa: E501
                                                        local_var_params['end'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `end` when calling `get_impacted_tests`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `get_impacted_tests`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'end' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['end']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `end` when calling `get_impacted_tests`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        if self.api_client.client_side_validation and 'baseline' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['baseline']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `baseline` when calling `get_impacted_tests`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 'baseline' in local_var_params and local_var_params['baseline'] is not None:  # noqa: E501
            query_params.append(('baseline', local_var_params['baseline']))  # noqa: E501
        if 'end' in local_var_params and local_var_params['end'] is not None:  # noqa: E501
            query_params.append(('end', local_var_params['end']))  # noqa: E501
        if 'partitions' in local_var_params and local_var_params['partitions'] is not None:  # noqa: E501
            query_params.append(('partitions', local_var_params['partitions']))  # noqa: E501
            collection_formats['partitions'] = 'multi'  # noqa: E501
        if 'prioritization_strategy' in local_var_params and local_var_params['prioritization_strategy'] is not None:  # noqa: E501
            query_params.append(('prioritization-strategy', local_var_params['prioritization_strategy']))  # noqa: E501
        if 'ensure_processed' in local_var_params and local_var_params['ensure_processed'] is not None:  # noqa: E501
            query_params.append(('ensure-processed', local_var_params['ensure_processed']))  # noqa: E501
        if 'include_non_impacted' in local_var_params and local_var_params['include_non_impacted'] is not None:  # noqa: E501
            query_params.append(('include-non-impacted', local_var_params['include_non_impacted']))  # noqa: E501
        if 'include_failed_and_skipped' in local_var_params and local_var_params['include_failed_and_skipped'] is not None:  # noqa: E501
            query_params.append(('include-failed-and-skipped', local_var_params['include_failed_and_skipped']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'clustered_test_details' in local_var_params:
            body_params = local_var_params['clustered_test_details']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/impacted-tests', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PrioritizableTestCluster]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_impacted_tests1(self, project, end, **kwargs):  # noqa: E501
        """Get impacted tests  # noqa: E501

        Returns an ordered list of test clusters that are impacted by the given changes. The returned flat list of tests is a subset of all tests known to Teamscale. When the tests themselves have changed, new tests were added or tests have been deleted, this service cannot take that into account. Please use the PUT endpoint instead to provide a list of available tests. In particular, this endpoint may return tests that no longer exist. Callers must handle this case. This service is public API since Teamscale 5.7. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_impacted_tests1(project, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str end: The end timestamp (inclusive). (required)
        :param str baseline: The baseline timestamp (inclusive).
        :param list[str] partitions: This parameter may be given multiple times. Specifies the test coverage partitions to consider.
        :param str prioritization_strategy: The name of the test prioritization strategy
        :param bool ensure_processed: If set to true the request will fail with '412 PRECONDITION FAILED' if the exact given end commit has not been processed yet and therefore data may not be up-to-date.
        :param bool include_non_impacted: Append and prioritize non-impacted tests after impacted tests
        :param bool include_failed_and_skipped: Append and prioritize previously failed and skipped tests before impacted tests.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[PrioritizableTest]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_impacted_tests1_with_http_info(project, end, **kwargs)  # noqa: E501

    def get_impacted_tests1_with_http_info(self, project, end, **kwargs):  # noqa: E501
        """Get impacted tests  # noqa: E501

        Returns an ordered list of test clusters that are impacted by the given changes. The returned flat list of tests is a subset of all tests known to Teamscale. When the tests themselves have changed, new tests were added or tests have been deleted, this service cannot take that into account. Please use the PUT endpoint instead to provide a list of available tests. In particular, this endpoint may return tests that no longer exist. Callers must handle this case. This service is public API since Teamscale 5.7. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_impacted_tests1_with_http_info(project, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str end: The end timestamp (inclusive). (required)
        :param str baseline: The baseline timestamp (inclusive).
        :param list[str] partitions: This parameter may be given multiple times. Specifies the test coverage partitions to consider.
        :param str prioritization_strategy: The name of the test prioritization strategy
        :param bool ensure_processed: If set to true the request will fail with '412 PRECONDITION FAILED' if the exact given end commit has not been processed yet and therefore data may not be up-to-date.
        :param bool include_non_impacted: Append and prioritize non-impacted tests after impacted tests
        :param bool include_failed_and_skipped: Append and prioritize previously failed and skipped tests before impacted tests.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[PrioritizableTest], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'end',
            'baseline',
            'partitions',
            'prioritization_strategy',
            'ensure_processed',
            'include_non_impacted',
            'include_failed_and_skipped'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_impacted_tests1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `get_impacted_tests1`")  # noqa: E501
        # verify the required parameter 'end' is set
        if self.api_client.client_side_validation and ('end' not in local_var_params or  # noqa: E501
                                                        local_var_params['end'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `end` when calling `get_impacted_tests1`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `get_impacted_tests1`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'end' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['end']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `end` when calling `get_impacted_tests1`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        if self.api_client.client_side_validation and 'baseline' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['baseline']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `baseline` when calling `get_impacted_tests1`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 'baseline' in local_var_params and local_var_params['baseline'] is not None:  # noqa: E501
            query_params.append(('baseline', local_var_params['baseline']))  # noqa: E501
        if 'end' in local_var_params and local_var_params['end'] is not None:  # noqa: E501
            query_params.append(('end', local_var_params['end']))  # noqa: E501
        if 'partitions' in local_var_params and local_var_params['partitions'] is not None:  # noqa: E501
            query_params.append(('partitions', local_var_params['partitions']))  # noqa: E501
            collection_formats['partitions'] = 'multi'  # noqa: E501
        if 'prioritization_strategy' in local_var_params and local_var_params['prioritization_strategy'] is not None:  # noqa: E501
            query_params.append(('prioritization-strategy', local_var_params['prioritization_strategy']))  # noqa: E501
        if 'ensure_processed' in local_var_params and local_var_params['ensure_processed'] is not None:  # noqa: E501
            query_params.append(('ensure-processed', local_var_params['ensure_processed']))  # noqa: E501
        if 'include_non_impacted' in local_var_params and local_var_params['include_non_impacted'] is not None:  # noqa: E501
            query_params.append(('include-non-impacted', local_var_params['include_non_impacted']))  # noqa: E501
        if 'include_failed_and_skipped' in local_var_params and local_var_params['include_failed_and_skipped'] is not None:  # noqa: E501
            query_params.append(('include-failed-and-skipped', local_var_params['include_failed_and_skipped']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/impacted-tests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PrioritizableTest]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
