# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ExternalAnalysisApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def commit_analysis_results(self, project, session_id, **kwargs):  # noqa: E501
        """Commit session  # noqa: E501

        Commits and closes the given session. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commit_analysis_results(project, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str session_id: If session ID is provided, the results will be appended to the given session instead of creating a new session. Use \"auto-create\" in place of session ID to create a new session, perform upload and commit session in one step. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.commit_analysis_results_with_http_info(project, session_id, **kwargs)  # noqa: E501

    def commit_analysis_results_with_http_info(self, project, session_id, **kwargs):  # noqa: E501
        """Commit session  # noqa: E501

        Commits and closes the given session. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commit_analysis_results_with_http_info(project, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str session_id: If session ID is provided, the results will be appended to the given session instead of creating a new session. Use \"auto-create\" in place of session ID to create a new session, perform upload and commit session in one step. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'session_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commit_analysis_results" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `commit_analysis_results`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if self.api_client.client_side_validation and ('session_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_id` when calling `commit_analysis_results`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `commit_analysis_results`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501
        if 'session_id' in local_var_params:
            path_params['sessionId'] = local_var_params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/external-analysis/session/{sessionId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_session(self, project, **kwargs):  # noqa: E501
        """Get session ID  # noqa: E501

        Obtains a new session ID. Using session ID allows to perform external uploads in multiple calls that all belong to the same session. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_session(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str revision: This parameter allows to pass a revision instead of a timestamp.
        :param str repository: This parameter allows to pass a repository name
        :param str message: A message that describes the external analysis, similar to a commit message.
        :param str partition: The name of the logical partition to store the results into. All existing data in this partition will be invalidated. A partition typically corresponds to one analysis run, i.e. if there are two independent builds/runs, they must use different partitions.
        :param bool movetolastcommit: Whether to move the upload timestamp to right after the last commit.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_session_with_http_info(project, **kwargs)  # noqa: E501

    def create_session_with_http_info(self, project, **kwargs):  # noqa: E501
        """Get session ID  # noqa: E501

        Obtains a new session ID. Using session ID allows to perform external uploads in multiple calls that all belong to the same session. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_session_with_http_info(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str revision: This parameter allows to pass a revision instead of a timestamp.
        :param str repository: This parameter allows to pass a repository name
        :param str message: A message that describes the external analysis, similar to a commit message.
        :param str partition: The name of the logical partition to store the results into. All existing data in this partition will be invalidated. A partition typically corresponds to one analysis run, i.e. if there are two independent builds/runs, they must use different partitions.
        :param bool movetolastcommit: Whether to move the upload timestamp to right after the last commit.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            't',
            'revision',
            'repository',
            'message',
            'partition',
            'movetolastcommit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_session" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `create_session`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `create_session`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `create_session`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501
        if 'revision' in local_var_params and local_var_params['revision'] is not None:  # noqa: E501
            query_params.append(('revision', local_var_params['revision']))  # noqa: E501
        if 'repository' in local_var_params and local_var_params['repository'] is not None:  # noqa: E501
            query_params.append(('repository', local_var_params['repository']))  # noqa: E501
        if 'message' in local_var_params and local_var_params['message'] is not None:  # noqa: E501
            query_params.append(('message', local_var_params['message']))  # noqa: E501
        if 'partition' in local_var_params and local_var_params['partition'] is not None:  # noqa: E501
            query_params.append(('partition', local_var_params['partition']))  # noqa: E501
        if 'movetolastcommit' in local_var_params and local_var_params['movetolastcommit'] is not None:  # noqa: E501
            query_params.append(('movetolastcommit', local_var_params['movetolastcommit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/external-analysis/session', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_analysis_results(self, project, session_id, **kwargs):  # noqa: E501
        """Delete session  # noqa: E501

        Deletes a session in case of abortion. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_analysis_results(project, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str session_id: If session ID is provided, the results will be appended to the given session instead of creating a new session. Use \"auto-create\" in place of session ID to create a new session, perform upload and commit session in one step. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_analysis_results_with_http_info(project, session_id, **kwargs)  # noqa: E501

    def delete_analysis_results_with_http_info(self, project, session_id, **kwargs):  # noqa: E501
        """Delete session  # noqa: E501

        Deletes a session in case of abortion. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_analysis_results_with_http_info(project, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str session_id: If session ID is provided, the results will be appended to the given session instead of creating a new session. Use \"auto-create\" in place of session ID to create a new session, perform upload and commit session in one step. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'session_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_analysis_results" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `delete_analysis_results`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if self.api_client.client_side_validation and ('session_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_id` when calling `delete_analysis_results`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `delete_analysis_results`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501
        if 'session_id' in local_var_params:
            path_params['sessionId'] = local_var_params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/external-analysis/session/{sessionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_source_map(self, project, t, version, generated_file, **kwargs):  # noqa: E501
        """Get source map  # noqa: E501

        Retrieves the javascript source map stored for an application version and generated file. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_source_map(project, t, version, generated_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon. (required)
        :param str version: The application version to which the uploaded mappings belong (required)
        :param str generated_file: The name of the generated source file whose mappings should be returned (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: JavaScriptSourceMap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_source_map_with_http_info(project, t, version, generated_file, **kwargs)  # noqa: E501

    def get_source_map_with_http_info(self, project, t, version, generated_file, **kwargs):  # noqa: E501
        """Get source map  # noqa: E501

        Retrieves the javascript source map stored for an application version and generated file. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_source_map_with_http_info(project, t, version, generated_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon. (required)
        :param str version: The application version to which the uploaded mappings belong (required)
        :param str generated_file: The name of the generated source file whose mappings should be returned (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(JavaScriptSourceMap, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            't',
            'version',
            'generated_file'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_source_map" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `get_source_map`")  # noqa: E501
        # verify the required parameter 't' is set
        if self.api_client.client_side_validation and ('t' not in local_var_params or  # noqa: E501
                                                        local_var_params['t'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `t` when calling `get_source_map`")  # noqa: E501
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in local_var_params or  # noqa: E501
                                                        local_var_params['version'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `version` when calling `get_source_map`")  # noqa: E501
        # verify the required parameter 'generated_file' is set
        if self.api_client.client_side_validation and ('generated_file' not in local_var_params or  # noqa: E501
                                                        local_var_params['generated_file'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `generated_file` when calling `get_source_map`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `get_source_map`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `get_source_map`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501
        if 'version' in local_var_params and local_var_params['version'] is not None:  # noqa: E501
            query_params.append(('version', local_var_params['version']))  # noqa: E501
        if 'generated_file' in local_var_params and local_var_params['generated_file'] is not None:  # noqa: E501
            query_params.append(('generatedFile', local_var_params['generated_file']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/javascript-source-maps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JavaScriptSourceMap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_debug_info(self, project, version, **kwargs):  # noqa: E501
        """Upload debug info  # noqa: E501

        Uploads PDB or MDB files for analysis. Processes an upload of method mapping information. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_debug_info(project, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str version: The parameter that contains the program version to which the uploaded coverage belongs. (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param list[file] file:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.upload_debug_info_with_http_info(project, version, **kwargs)  # noqa: E501

    def upload_debug_info_with_http_info(self, project, version, **kwargs):  # noqa: E501
        """Upload debug info  # noqa: E501

        Uploads PDB or MDB files for analysis. Processes an upload of method mapping information. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_debug_info_with_http_info(project, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str version: The parameter that contains the program version to which the uploaded coverage belongs. (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param list[file] file:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'version',
            't',
            'file'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_debug_info" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `upload_debug_info`")  # noqa: E501
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in local_var_params or  # noqa: E501
                                                        local_var_params['version'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `version` when calling `upload_debug_info`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `upload_debug_info`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `upload_debug_info`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 'version' in local_var_params and local_var_params['version'] is not None:  # noqa: E501
            query_params.append(('version', local_var_params['version']))  # noqa: E501
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
            collection_formats['file'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/external-analysis/dotnet-debug-info', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_dot_net_ephemeral_trace(self, project, version, partition, **kwargs):  # noqa: E501
        """Upload .NET ephemeral profiler coverage  # noqa: E501

        Imports coverage information from the .NET ephemeral profiler (profiles only on the method level). This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_dot_net_ephemeral_trace(project, version, partition, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str version: The parameter that contains the program version to which the uploaded coverage belongs. (required)
        :param str partition: The name of the logical partition to store the results into. All existing data in this partition will be invalidated. A partition typically corresponds to one analysis run, i.e. if there are two independent builds/runs, they must use different partitions. (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str message: A message that describes the external analysis, similar to a commit message.
        :param list[file] report:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.upload_dot_net_ephemeral_trace_with_http_info(project, version, partition, **kwargs)  # noqa: E501

    def upload_dot_net_ephemeral_trace_with_http_info(self, project, version, partition, **kwargs):  # noqa: E501
        """Upload .NET ephemeral profiler coverage  # noqa: E501

        Imports coverage information from the .NET ephemeral profiler (profiles only on the method level). This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_dot_net_ephemeral_trace_with_http_info(project, version, partition, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str version: The parameter that contains the program version to which the uploaded coverage belongs. (required)
        :param str partition: The name of the logical partition to store the results into. All existing data in this partition will be invalidated. A partition typically corresponds to one analysis run, i.e. if there are two independent builds/runs, they must use different partitions. (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str message: A message that describes the external analysis, similar to a commit message.
        :param list[file] report:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'version',
            'partition',
            't',
            'message',
            'report'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_dot_net_ephemeral_trace" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `upload_dot_net_ephemeral_trace`")  # noqa: E501
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in local_var_params or  # noqa: E501
                                                        local_var_params['version'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `version` when calling `upload_dot_net_ephemeral_trace`")  # noqa: E501
        # verify the required parameter 'partition' is set
        if self.api_client.client_side_validation and ('partition' not in local_var_params or  # noqa: E501
                                                        local_var_params['partition'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `partition` when calling `upload_dot_net_ephemeral_trace`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `upload_dot_net_ephemeral_trace`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `upload_dot_net_ephemeral_trace`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501
        if 'version' in local_var_params and local_var_params['version'] is not None:  # noqa: E501
            query_params.append(('version', local_var_params['version']))  # noqa: E501
        if 'partition' in local_var_params and local_var_params['partition'] is not None:  # noqa: E501
            query_params.append(('partition', local_var_params['partition']))  # noqa: E501
        if 'message' in local_var_params and local_var_params['message'] is not None:  # noqa: E501
            query_params.append(('message', local_var_params['message']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'report' in local_var_params:
            local_var_files['report'] = local_var_params['report']  # noqa: E501
            collection_formats['report'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/external-analysis/dotnet-ephemeral-trace', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_external_analysis_results(self, project, session_id, external_analysis_import_infos, **kwargs):  # noqa: E501
        """Upload external analysis results  # noqa: E501

        Adds external analysis results to the session. For performance reasons, it is recommended to batch calls to this service, i.e. not commit all files using single calls. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_external_analysis_results(project, session_id, external_analysis_import_infos, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str session_id: If session ID is provided, the results will be appended to the given session instead of creating a new session. Use \"auto-create\" in place of session ID to create a new session, perform upload and commit session in one step. (required)
        :param ExternalAnalysisImportInfos external_analysis_import_infos: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str revision: This parameter allows to pass a revision instead of a timestamp.
        :param str repository: This parameter allows to pass a repository name
        :param str message: A message that describes the external analysis, similar to a commit message.
        :param str partition: The name of the logical partition to store the results into. All existing data in this partition will be invalidated. A partition typically corresponds to one analysis run, i.e. if there are two independent builds/runs, they must use different partitions.
        :param bool movetolastcommit: Whether to move the upload timestamp to right after the last commit.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.upload_external_analysis_results_with_http_info(project, session_id, external_analysis_import_infos, **kwargs)  # noqa: E501

    def upload_external_analysis_results_with_http_info(self, project, session_id, external_analysis_import_infos, **kwargs):  # noqa: E501
        """Upload external analysis results  # noqa: E501

        Adds external analysis results to the session. For performance reasons, it is recommended to batch calls to this service, i.e. not commit all files using single calls. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_external_analysis_results_with_http_info(project, session_id, external_analysis_import_infos, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str session_id: If session ID is provided, the results will be appended to the given session instead of creating a new session. Use \"auto-create\" in place of session ID to create a new session, perform upload and commit session in one step. (required)
        :param ExternalAnalysisImportInfos external_analysis_import_infos: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str revision: This parameter allows to pass a revision instead of a timestamp.
        :param str repository: This parameter allows to pass a repository name
        :param str message: A message that describes the external analysis, similar to a commit message.
        :param str partition: The name of the logical partition to store the results into. All existing data in this partition will be invalidated. A partition typically corresponds to one analysis run, i.e. if there are two independent builds/runs, they must use different partitions.
        :param bool movetolastcommit: Whether to move the upload timestamp to right after the last commit.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'session_id',
            'external_analysis_import_infos',
            't',
            'revision',
            'repository',
            'message',
            'partition',
            'movetolastcommit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_external_analysis_results" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `upload_external_analysis_results`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if self.api_client.client_side_validation and ('session_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_id` when calling `upload_external_analysis_results`")  # noqa: E501
        # verify the required parameter 'external_analysis_import_infos' is set
        if self.api_client.client_side_validation and ('external_analysis_import_infos' not in local_var_params or  # noqa: E501
                                                        local_var_params['external_analysis_import_infos'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `external_analysis_import_infos` when calling `upload_external_analysis_results`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `upload_external_analysis_results`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `upload_external_analysis_results`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501
        if 'session_id' in local_var_params:
            path_params['sessionId'] = local_var_params['session_id']  # noqa: E501

        query_params = []
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501
        if 'revision' in local_var_params and local_var_params['revision'] is not None:  # noqa: E501
            query_params.append(('revision', local_var_params['revision']))  # noqa: E501
        if 'repository' in local_var_params and local_var_params['repository'] is not None:  # noqa: E501
            query_params.append(('repository', local_var_params['repository']))  # noqa: E501
        if 'message' in local_var_params and local_var_params['message'] is not None:  # noqa: E501
            query_params.append(('message', local_var_params['message']))  # noqa: E501
        if 'partition' in local_var_params and local_var_params['partition'] is not None:  # noqa: E501
            query_params.append(('partition', local_var_params['partition']))  # noqa: E501
        if 'movetolastcommit' in local_var_params and local_var_params['movetolastcommit'] is not None:  # noqa: E501
            query_params.append(('movetolastcommit', local_var_params['movetolastcommit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'external_analysis_import_infos' in local_var_params:
            body_params = local_var_params['external_analysis_import_infos']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/external-analysis/session/{sessionId}/external-analysis-import-infos', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_external_findings(self, project, session_id, external_finding_file_data, **kwargs):  # noqa: E501
        """Upload external findings  # noqa: E501

        Adds external findings to the session. For performance reasons, it is recommended to batch calls to this service, i.e. not commit all files using single calls. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_external_findings(project, session_id, external_finding_file_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str session_id: If session ID is provided, the results will be appended to the given session instead of creating a new session. Use \"auto-create\" in place of session ID to create a new session, perform upload and commit session in one step. (required)
        :param list[ExternalFindingFileData] external_finding_file_data: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str revision: This parameter allows to pass a revision instead of a timestamp.
        :param str repository: This parameter allows to pass a repository name
        :param str message: A message that describes the external analysis, similar to a commit message.
        :param str partition: The name of the logical partition to store the results into. All existing data in this partition will be invalidated. A partition typically corresponds to one analysis run, i.e. if there are two independent builds/runs, they must use different partitions.
        :param bool movetolastcommit: Whether to move the upload timestamp to right after the last commit.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.upload_external_findings_with_http_info(project, session_id, external_finding_file_data, **kwargs)  # noqa: E501

    def upload_external_findings_with_http_info(self, project, session_id, external_finding_file_data, **kwargs):  # noqa: E501
        """Upload external findings  # noqa: E501

        Adds external findings to the session. For performance reasons, it is recommended to batch calls to this service, i.e. not commit all files using single calls. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_external_findings_with_http_info(project, session_id, external_finding_file_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str session_id: If session ID is provided, the results will be appended to the given session instead of creating a new session. Use \"auto-create\" in place of session ID to create a new session, perform upload and commit session in one step. (required)
        :param list[ExternalFindingFileData] external_finding_file_data: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str revision: This parameter allows to pass a revision instead of a timestamp.
        :param str repository: This parameter allows to pass a repository name
        :param str message: A message that describes the external analysis, similar to a commit message.
        :param str partition: The name of the logical partition to store the results into. All existing data in this partition will be invalidated. A partition typically corresponds to one analysis run, i.e. if there are two independent builds/runs, they must use different partitions.
        :param bool movetolastcommit: Whether to move the upload timestamp to right after the last commit.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'session_id',
            'external_finding_file_data',
            't',
            'revision',
            'repository',
            'message',
            'partition',
            'movetolastcommit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_external_findings" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `upload_external_findings`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if self.api_client.client_side_validation and ('session_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_id` when calling `upload_external_findings`")  # noqa: E501
        # verify the required parameter 'external_finding_file_data' is set
        if self.api_client.client_side_validation and ('external_finding_file_data' not in local_var_params or  # noqa: E501
                                                        local_var_params['external_finding_file_data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `external_finding_file_data` when calling `upload_external_findings`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `upload_external_findings`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `upload_external_findings`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501
        if 'session_id' in local_var_params:
            path_params['sessionId'] = local_var_params['session_id']  # noqa: E501

        query_params = []
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501
        if 'revision' in local_var_params and local_var_params['revision'] is not None:  # noqa: E501
            query_params.append(('revision', local_var_params['revision']))  # noqa: E501
        if 'repository' in local_var_params and local_var_params['repository'] is not None:  # noqa: E501
            query_params.append(('repository', local_var_params['repository']))  # noqa: E501
        if 'message' in local_var_params and local_var_params['message'] is not None:  # noqa: E501
            query_params.append(('message', local_var_params['message']))  # noqa: E501
        if 'partition' in local_var_params and local_var_params['partition'] is not None:  # noqa: E501
            query_params.append(('partition', local_var_params['partition']))  # noqa: E501
        if 'movetolastcommit' in local_var_params and local_var_params['movetolastcommit'] is not None:  # noqa: E501
            query_params.append(('movetolastcommit', local_var_params['movetolastcommit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'external_finding_file_data' in local_var_params:
            body_params = local_var_params['external_finding_file_data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/external-analysis/session/{sessionId}/external-findings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_external_metrics(self, project, session_id, external_metrics_entry, **kwargs):  # noqa: E501
        """Upload external metrics  # noqa: E501

        Adds external metrics to the session. For performance reasons, it is recommended to batch calls to this service, i.e. not commit all files using single calls. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_external_metrics(project, session_id, external_metrics_entry, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str session_id: If session ID is provided, the results will be appended to the given session instead of creating a new session. Use \"auto-create\" in place of session ID to create a new session, perform upload and commit session in one step. (required)
        :param list[ExternalMetricsEntry] external_metrics_entry: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str revision: This parameter allows to pass a revision instead of a timestamp.
        :param str repository: This parameter allows to pass a repository name
        :param str message: A message that describes the external analysis, similar to a commit message.
        :param str partition: The name of the logical partition to store the results into. All existing data in this partition will be invalidated. A partition typically corresponds to one analysis run, i.e. if there are two independent builds/runs, they must use different partitions.
        :param bool movetolastcommit: Whether to move the upload timestamp to right after the last commit.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.upload_external_metrics_with_http_info(project, session_id, external_metrics_entry, **kwargs)  # noqa: E501

    def upload_external_metrics_with_http_info(self, project, session_id, external_metrics_entry, **kwargs):  # noqa: E501
        """Upload external metrics  # noqa: E501

        Adds external metrics to the session. For performance reasons, it is recommended to batch calls to this service, i.e. not commit all files using single calls. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_external_metrics_with_http_info(project, session_id, external_metrics_entry, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str session_id: If session ID is provided, the results will be appended to the given session instead of creating a new session. Use \"auto-create\" in place of session ID to create a new session, perform upload and commit session in one step. (required)
        :param list[ExternalMetricsEntry] external_metrics_entry: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str revision: This parameter allows to pass a revision instead of a timestamp.
        :param str repository: This parameter allows to pass a repository name
        :param str message: A message that describes the external analysis, similar to a commit message.
        :param str partition: The name of the logical partition to store the results into. All existing data in this partition will be invalidated. A partition typically corresponds to one analysis run, i.e. if there are two independent builds/runs, they must use different partitions.
        :param bool movetolastcommit: Whether to move the upload timestamp to right after the last commit.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'session_id',
            'external_metrics_entry',
            't',
            'revision',
            'repository',
            'message',
            'partition',
            'movetolastcommit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_external_metrics" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `upload_external_metrics`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if self.api_client.client_side_validation and ('session_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_id` when calling `upload_external_metrics`")  # noqa: E501
        # verify the required parameter 'external_metrics_entry' is set
        if self.api_client.client_side_validation and ('external_metrics_entry' not in local_var_params or  # noqa: E501
                                                        local_var_params['external_metrics_entry'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `external_metrics_entry` when calling `upload_external_metrics`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `upload_external_metrics`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `upload_external_metrics`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501
        if 'session_id' in local_var_params:
            path_params['sessionId'] = local_var_params['session_id']  # noqa: E501

        query_params = []
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501
        if 'revision' in local_var_params and local_var_params['revision'] is not None:  # noqa: E501
            query_params.append(('revision', local_var_params['revision']))  # noqa: E501
        if 'repository' in local_var_params and local_var_params['repository'] is not None:  # noqa: E501
            query_params.append(('repository', local_var_params['repository']))  # noqa: E501
        if 'message' in local_var_params and local_var_params['message'] is not None:  # noqa: E501
            query_params.append(('message', local_var_params['message']))  # noqa: E501
        if 'partition' in local_var_params and local_var_params['partition'] is not None:  # noqa: E501
            query_params.append(('partition', local_var_params['partition']))  # noqa: E501
        if 'movetolastcommit' in local_var_params and local_var_params['movetolastcommit'] is not None:  # noqa: E501
            query_params.append(('movetolastcommit', local_var_params['movetolastcommit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'external_metrics_entry' in local_var_params:
            body_params = local_var_params['external_metrics_entry']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/external-analysis/session/{sessionId}/external-metrics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_istanbul_source_mapped_coverage(self, project, version, partition, istanbul_json, **kwargs):  # noqa: E501
        """Upload Istanbul-based coverage  # noqa: E501

        Uploads coverage information from the Istanbul-based TGA profiler. Performs resolution of line numbers based on uploaded source maps. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_istanbul_source_mapped_coverage(project, version, partition, istanbul_json, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str version: The parameter that contains the program version to which the uploaded coverage belongs. (required)
        :param str partition: The name of the logical partition to store the results into. All existing data in this partition will be invalidated. A partition typically corresponds to one analysis run, i.e. if there are two independent builds/runs, they must use different partitions. (required)
        :param IstanbulJson istanbul_json: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str message: A message that describes the external analysis, similar to a commit message.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.upload_istanbul_source_mapped_coverage_with_http_info(project, version, partition, istanbul_json, **kwargs)  # noqa: E501

    def upload_istanbul_source_mapped_coverage_with_http_info(self, project, version, partition, istanbul_json, **kwargs):  # noqa: E501
        """Upload Istanbul-based coverage  # noqa: E501

        Uploads coverage information from the Istanbul-based TGA profiler. Performs resolution of line numbers based on uploaded source maps. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_istanbul_source_mapped_coverage_with_http_info(project, version, partition, istanbul_json, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str version: The parameter that contains the program version to which the uploaded coverage belongs. (required)
        :param str partition: The name of the logical partition to store the results into. All existing data in this partition will be invalidated. A partition typically corresponds to one analysis run, i.e. if there are two independent builds/runs, they must use different partitions. (required)
        :param IstanbulJson istanbul_json: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str message: A message that describes the external analysis, similar to a commit message.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'version',
            'partition',
            'istanbul_json',
            't',
            'message'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_istanbul_source_mapped_coverage" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `upload_istanbul_source_mapped_coverage`")  # noqa: E501
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in local_var_params or  # noqa: E501
                                                        local_var_params['version'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `version` when calling `upload_istanbul_source_mapped_coverage`")  # noqa: E501
        # verify the required parameter 'partition' is set
        if self.api_client.client_side_validation and ('partition' not in local_var_params or  # noqa: E501
                                                        local_var_params['partition'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `partition` when calling `upload_istanbul_source_mapped_coverage`")  # noqa: E501
        # verify the required parameter 'istanbul_json' is set
        if self.api_client.client_side_validation and ('istanbul_json' not in local_var_params or  # noqa: E501
                                                        local_var_params['istanbul_json'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `istanbul_json` when calling `upload_istanbul_source_mapped_coverage`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `upload_istanbul_source_mapped_coverage`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `upload_istanbul_source_mapped_coverage`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501
        if 'version' in local_var_params and local_var_params['version'] is not None:  # noqa: E501
            query_params.append(('version', local_var_params['version']))  # noqa: E501
        if 'message' in local_var_params and local_var_params['message'] is not None:  # noqa: E501
            query_params.append(('message', local_var_params['message']))  # noqa: E501
        if 'partition' in local_var_params and local_var_params['partition'] is not None:  # noqa: E501
            query_params.append(('partition', local_var_params['partition']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'istanbul_json' in local_var_params:
            body_params = local_var_params['istanbul_json']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/external-analysis/istanbul-test-coverage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_non_code_metrics(self, project, session_id, non_code_metrics_entry, **kwargs):  # noqa: E501
        """Upload non-code metrics  # noqa: E501

        Adds non-code metrics to the session. For performance reasons, it is recommended to batch calls to this service, i.e. not commit all files using single calls. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_non_code_metrics(project, session_id, non_code_metrics_entry, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str session_id: If session ID is provided, the results will be appended to the given session instead of creating a new session. Use \"auto-create\" in place of session ID to create a new session, perform upload and commit session in one step. (required)
        :param list[NonCodeMetricsEntry] non_code_metrics_entry: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str revision: This parameter allows to pass a revision instead of a timestamp.
        :param str repository: This parameter allows to pass a repository name
        :param str message: A message that describes the external analysis, similar to a commit message.
        :param str partition: The name of the logical partition to store the results into. All existing data in this partition will be invalidated. A partition typically corresponds to one analysis run, i.e. if there are two independent builds/runs, they must use different partitions.
        :param bool movetolastcommit: Whether to move the upload timestamp to right after the last commit.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.upload_non_code_metrics_with_http_info(project, session_id, non_code_metrics_entry, **kwargs)  # noqa: E501

    def upload_non_code_metrics_with_http_info(self, project, session_id, non_code_metrics_entry, **kwargs):  # noqa: E501
        """Upload non-code metrics  # noqa: E501

        Adds non-code metrics to the session. For performance reasons, it is recommended to batch calls to this service, i.e. not commit all files using single calls. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_non_code_metrics_with_http_info(project, session_id, non_code_metrics_entry, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str session_id: If session ID is provided, the results will be appended to the given session instead of creating a new session. Use \"auto-create\" in place of session ID to create a new session, perform upload and commit session in one step. (required)
        :param list[NonCodeMetricsEntry] non_code_metrics_entry: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str revision: This parameter allows to pass a revision instead of a timestamp.
        :param str repository: This parameter allows to pass a repository name
        :param str message: A message that describes the external analysis, similar to a commit message.
        :param str partition: The name of the logical partition to store the results into. All existing data in this partition will be invalidated. A partition typically corresponds to one analysis run, i.e. if there are two independent builds/runs, they must use different partitions.
        :param bool movetolastcommit: Whether to move the upload timestamp to right after the last commit.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'session_id',
            'non_code_metrics_entry',
            't',
            'revision',
            'repository',
            'message',
            'partition',
            'movetolastcommit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_non_code_metrics" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `upload_non_code_metrics`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if self.api_client.client_side_validation and ('session_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_id` when calling `upload_non_code_metrics`")  # noqa: E501
        # verify the required parameter 'non_code_metrics_entry' is set
        if self.api_client.client_side_validation and ('non_code_metrics_entry' not in local_var_params or  # noqa: E501
                                                        local_var_params['non_code_metrics_entry'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `non_code_metrics_entry` when calling `upload_non_code_metrics`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `upload_non_code_metrics`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `upload_non_code_metrics`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501
        if 'session_id' in local_var_params:
            path_params['sessionId'] = local_var_params['session_id']  # noqa: E501

        query_params = []
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501
        if 'revision' in local_var_params and local_var_params['revision'] is not None:  # noqa: E501
            query_params.append(('revision', local_var_params['revision']))  # noqa: E501
        if 'repository' in local_var_params and local_var_params['repository'] is not None:  # noqa: E501
            query_params.append(('repository', local_var_params['repository']))  # noqa: E501
        if 'message' in local_var_params and local_var_params['message'] is not None:  # noqa: E501
            query_params.append(('message', local_var_params['message']))  # noqa: E501
        if 'partition' in local_var_params and local_var_params['partition'] is not None:  # noqa: E501
            query_params.append(('partition', local_var_params['partition']))  # noqa: E501
        if 'movetolastcommit' in local_var_params and local_var_params['movetolastcommit'] is not None:  # noqa: E501
            query_params.append(('movetolastcommit', local_var_params['movetolastcommit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'non_code_metrics_entry' in local_var_params:
            body_params = local_var_params['non_code_metrics_entry']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/external-analysis/session/{sessionId}/non-code-metrics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_report(self, project, session_id, format, **kwargs):  # noqa: E501
        """Upload external report(s)  # noqa: E501

        Adds external reports to the session. For performance reasons, it is recommended to batch calls to this service, i.e. not commit all files using single calls. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_report(project, session_id, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str session_id: If session ID is provided, the results will be appended to the given session instead of creating a new session. Use \"auto-create\" in place of session ID to create a new session, perform upload and commit session in one step. (required)
        :param str format: The format of the uploaded report. (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str revision: This parameter allows to pass a revision instead of a timestamp.
        :param str repository: This parameter allows to pass a repository name
        :param str message: A message that describes the external analysis, similar to a commit message.
        :param str partition: The name of the logical partition to store the results into. All existing data in this partition will be invalidated. A partition typically corresponds to one analysis run, i.e. if there are two independent builds/runs, they must use different partitions.
        :param bool movetolastcommit: Whether to move the upload timestamp to right after the last commit.
        :param str path_prefix: The path prefix for the uploaded test artifacts.
        :param list[file] report:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.upload_report_with_http_info(project, session_id, format, **kwargs)  # noqa: E501

    def upload_report_with_http_info(self, project, session_id, format, **kwargs):  # noqa: E501
        """Upload external report(s)  # noqa: E501

        Adds external reports to the session. For performance reasons, it is recommended to batch calls to this service, i.e. not commit all files using single calls. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_report_with_http_info(project, session_id, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str session_id: If session ID is provided, the results will be appended to the given session instead of creating a new session. Use \"auto-create\" in place of session ID to create a new session, perform upload and commit session in one step. (required)
        :param str format: The format of the uploaded report. (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str revision: This parameter allows to pass a revision instead of a timestamp.
        :param str repository: This parameter allows to pass a repository name
        :param str message: A message that describes the external analysis, similar to a commit message.
        :param str partition: The name of the logical partition to store the results into. All existing data in this partition will be invalidated. A partition typically corresponds to one analysis run, i.e. if there are two independent builds/runs, they must use different partitions.
        :param bool movetolastcommit: Whether to move the upload timestamp to right after the last commit.
        :param str path_prefix: The path prefix for the uploaded test artifacts.
        :param list[file] report:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'session_id',
            'format',
            't',
            'revision',
            'repository',
            'message',
            'partition',
            'movetolastcommit',
            'path_prefix',
            'report'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_report" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `upload_report`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if self.api_client.client_side_validation and ('session_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_id` when calling `upload_report`")  # noqa: E501
        # verify the required parameter 'format' is set
        if self.api_client.client_side_validation and ('format' not in local_var_params or  # noqa: E501
                                                        local_var_params['format'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `format` when calling `upload_report`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `upload_report`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `upload_report`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501
        if 'session_id' in local_var_params:
            path_params['sessionId'] = local_var_params['session_id']  # noqa: E501

        query_params = []
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501
        if 'revision' in local_var_params and local_var_params['revision'] is not None:  # noqa: E501
            query_params.append(('revision', local_var_params['revision']))  # noqa: E501
        if 'repository' in local_var_params and local_var_params['repository'] is not None:  # noqa: E501
            query_params.append(('repository', local_var_params['repository']))  # noqa: E501
        if 'message' in local_var_params and local_var_params['message'] is not None:  # noqa: E501
            query_params.append(('message', local_var_params['message']))  # noqa: E501
        if 'partition' in local_var_params and local_var_params['partition'] is not None:  # noqa: E501
            query_params.append(('partition', local_var_params['partition']))  # noqa: E501
        if 'movetolastcommit' in local_var_params and local_var_params['movetolastcommit'] is not None:  # noqa: E501
            query_params.append(('movetolastcommit', local_var_params['movetolastcommit']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501
        if 'path_prefix' in local_var_params and local_var_params['path_prefix'] is not None:  # noqa: E501
            query_params.append(('path-prefix', local_var_params['path_prefix']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'report' in local_var_params:
            local_var_files['report'] = local_var_params['report']  # noqa: E501
            collection_formats['report'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/external-analysis/session/{sessionId}/report', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_source_maps(self, project, t, version, java_script_source_map, **kwargs):  # noqa: E501
        """Upload source map  # noqa: E501

        Uploads javascript source maps for an application version. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_source_maps(project, t, version, java_script_source_map, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon. (required)
        :param str version: The application version to which the uploaded mappings belong (required)
        :param JavaScriptSourceMap java_script_source_map: Source mapping files to be stored (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.upload_source_maps_with_http_info(project, t, version, java_script_source_map, **kwargs)  # noqa: E501

    def upload_source_maps_with_http_info(self, project, t, version, java_script_source_map, **kwargs):  # noqa: E501
        """Upload source map  # noqa: E501

        Uploads javascript source maps for an application version. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_source_maps_with_http_info(project, t, version, java_script_source_map, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon. (required)
        :param str version: The application version to which the uploaded mappings belong (required)
        :param JavaScriptSourceMap java_script_source_map: Source mapping files to be stored (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            't',
            'version',
            'java_script_source_map'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_source_maps" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `upload_source_maps`")  # noqa: E501
        # verify the required parameter 't' is set
        if self.api_client.client_side_validation and ('t' not in local_var_params or  # noqa: E501
                                                        local_var_params['t'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `t` when calling `upload_source_maps`")  # noqa: E501
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in local_var_params or  # noqa: E501
                                                        local_var_params['version'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `version` when calling `upload_source_maps`")  # noqa: E501
        # verify the required parameter 'java_script_source_map' is set
        if self.api_client.client_side_validation and ('java_script_source_map' not in local_var_params or  # noqa: E501
                                                        local_var_params['java_script_source_map'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `java_script_source_map` when calling `upload_source_maps`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `upload_source_maps`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `upload_source_maps`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501
        if 'version' in local_var_params and local_var_params['version'] is not None:  # noqa: E501
            query_params.append(('version', local_var_params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'java_script_source_map' in local_var_params:
            body_params = local_var_params['java_script_source_map']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/javascript-source-maps', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
