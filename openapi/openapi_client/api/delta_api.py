# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DeltaApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_finding_delta_badge(self, project, **kwargs):  # noqa: E501
        """Get finding delta badge  # noqa: E501

        Creates a badge for the finding delta, i.e. for the count of newly added, unmodified, and deleted findings. This service is public API since Teamscale 5.9. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_finding_delta_badge(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str t1: Range start timestamp
        :param str t2: Range end timestamp
        :param int max_milliseconds: Range duration in milliseconds
        :param str uniform_path: Uniform path to retrieve data for
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str regex: The regex filter. Filters findings by this regex. Considered Fields are Message and Location. Matches will be included in the result.
        :param bool exclude_regex: Whether regex excludes or includes findings.
        :param bool added_to_task: The added to task filter. Filter findings that already have a task assigned.
        :param list[str] filter: The finding category and group filter. Notation: category/group. The group part is optional. If a category or group is given, all matching findings will be filtered out and not included in the result.
        :param bool invert: Whether to invert the category and group filter.
        :param list[str] assessment_filters: The assessment filter. All mentioned assessment colors will be filtered out and not included in the result.
        :param str blacklisted: The blacklist filtering option.
        :param bool numeric_delta_only: Indicates whether the result should contain the actual delta findings.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_finding_delta_badge_with_http_info(project, **kwargs)  # noqa: E501

    def get_finding_delta_badge_with_http_info(self, project, **kwargs):  # noqa: E501
        """Get finding delta badge  # noqa: E501

        Creates a badge for the finding delta, i.e. for the count of newly added, unmodified, and deleted findings. This service is public API since Teamscale 5.9. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_finding_delta_badge_with_http_info(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str t1: Range start timestamp
        :param str t2: Range end timestamp
        :param int max_milliseconds: Range duration in milliseconds
        :param str uniform_path: Uniform path to retrieve data for
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str regex: The regex filter. Filters findings by this regex. Considered Fields are Message and Location. Matches will be included in the result.
        :param bool exclude_regex: Whether regex excludes or includes findings.
        :param bool added_to_task: The added to task filter. Filter findings that already have a task assigned.
        :param list[str] filter: The finding category and group filter. Notation: category/group. The group part is optional. If a category or group is given, all matching findings will be filtered out and not included in the result.
        :param bool invert: Whether to invert the category and group filter.
        :param list[str] assessment_filters: The assessment filter. All mentioned assessment colors will be filtered out and not included in the result.
        :param str blacklisted: The blacklist filtering option.
        :param bool numeric_delta_only: Indicates whether the result should contain the actual delta findings.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            't1',
            't2',
            'max_milliseconds',
            'uniform_path',
            't',
            'regex',
            'exclude_regex',
            'added_to_task',
            'filter',
            'invert',
            'assessment_filters',
            'blacklisted',
            'numeric_delta_only'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_finding_delta_badge" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `get_finding_delta_badge`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `get_finding_delta_badge`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't1' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t1']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t1` when calling `get_finding_delta_badge`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        if self.api_client.client_side_validation and 't2' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t2']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t2` when calling `get_finding_delta_badge`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `get_finding_delta_badge`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 't1' in local_var_params and local_var_params['t1'] is not None:  # noqa: E501
            query_params.append(('t1', local_var_params['t1']))  # noqa: E501
        if 't2' in local_var_params and local_var_params['t2'] is not None:  # noqa: E501
            query_params.append(('t2', local_var_params['t2']))  # noqa: E501
        if 'max_milliseconds' in local_var_params and local_var_params['max_milliseconds'] is not None:  # noqa: E501
            query_params.append(('max-milliseconds', local_var_params['max_milliseconds']))  # noqa: E501
        if 'uniform_path' in local_var_params and local_var_params['uniform_path'] is not None:  # noqa: E501
            query_params.append(('uniform-path', local_var_params['uniform_path']))  # noqa: E501
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501
        if 'regex' in local_var_params and local_var_params['regex'] is not None:  # noqa: E501
            query_params.append(('regex', local_var_params['regex']))  # noqa: E501
        if 'exclude_regex' in local_var_params and local_var_params['exclude_regex'] is not None:  # noqa: E501
            query_params.append(('exclude-regex', local_var_params['exclude_regex']))  # noqa: E501
        if 'added_to_task' in local_var_params and local_var_params['added_to_task'] is not None:  # noqa: E501
            query_params.append(('added-to-task', local_var_params['added_to_task']))  # noqa: E501
        if 'filter' in local_var_params and local_var_params['filter'] is not None:  # noqa: E501
            query_params.append(('filter', local_var_params['filter']))  # noqa: E501
            collection_formats['filter'] = 'multi'  # noqa: E501
        if 'invert' in local_var_params and local_var_params['invert'] is not None:  # noqa: E501
            query_params.append(('invert', local_var_params['invert']))  # noqa: E501
        if 'assessment_filters' in local_var_params and local_var_params['assessment_filters'] is not None:  # noqa: E501
            query_params.append(('assessment-filters', local_var_params['assessment_filters']))  # noqa: E501
            collection_formats['assessment-filters'] = 'multi'  # noqa: E501
        if 'blacklisted' in local_var_params and local_var_params['blacklisted'] is not None:  # noqa: E501
            query_params.append(('blacklisted', local_var_params['blacklisted']))  # noqa: E501
        if 'numeric_delta_only' in local_var_params and local_var_params['numeric_delta_only'] is not None:  # noqa: E501
            query_params.append(('numeric-delta-only', local_var_params['numeric_delta_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/findings/delta/badge', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_token_element_churn(self, project, **kwargs):  # noqa: E501
        """Get token element churn  # noqa: E501

        Provides a token element churn (i.e., the list of changed elements) for a given uniform path and time range. This service is public API since Teamscale 5.9.10. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_token_element_churn(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str t1: Range start timestamp
        :param str t2: Range end timestamp
        :param int max_milliseconds: Range duration in milliseconds
        :param str uniform_path: Uniform path to retrieve data for
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[TokenElementChurnInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_token_element_churn_with_http_info(project, **kwargs)  # noqa: E501

    def get_token_element_churn_with_http_info(self, project, **kwargs):  # noqa: E501
        """Get token element churn  # noqa: E501

        Provides a token element churn (i.e., the list of changed elements) for a given uniform path and time range. This service is public API since Teamscale 5.9.10. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_token_element_churn_with_http_info(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str t1: Range start timestamp
        :param str t2: Range end timestamp
        :param int max_milliseconds: Range duration in milliseconds
        :param str uniform_path: Uniform path to retrieve data for
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[TokenElementChurnInfo], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            't1',
            't2',
            'max_milliseconds',
            'uniform_path'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_token_element_churn" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `get_token_element_churn`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `get_token_element_churn`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't1' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t1']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t1` when calling `get_token_element_churn`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        if self.api_client.client_side_validation and 't2' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t2']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t2` when calling `get_token_element_churn`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 't1' in local_var_params and local_var_params['t1'] is not None:  # noqa: E501
            query_params.append(('t1', local_var_params['t1']))  # noqa: E501
        if 't2' in local_var_params and local_var_params['t2'] is not None:  # noqa: E501
            query_params.append(('t2', local_var_params['t2']))  # noqa: E501
        if 'max_milliseconds' in local_var_params and local_var_params['max_milliseconds'] is not None:  # noqa: E501
            query_params.append(('max-milliseconds', local_var_params['max_milliseconds']))  # noqa: E501
        if 'uniform_path' in local_var_params and local_var_params['uniform_path'] is not None:  # noqa: E501
            query_params.append(('uniform-path', local_var_params['uniform_path']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/delta/affected-files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TokenElementChurnInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
