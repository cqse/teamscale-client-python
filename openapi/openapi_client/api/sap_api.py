# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SAPApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_abap_findings(self, project, object_type, source_object, **kwargs):  # noqa: E501
        """Get ABAP findings  # noqa: E501

        Returns findings for an ABAP source object, function group, or project. The element is expected in the form OBJTYPE/OBJNAME, e.g. 'PROG/ZTEST' or 'FUGR/!ABC!MY_FUNCTION_GROUP'. This service is public API since Teamscale 5.6. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_abap_findings(project, object_type, source_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str object_type: (required)
        :param str source_object: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str regex: The regex filter. Filters findings by this regex. Considered Fields are Message and Location. Matches will be included in the result.
        :param bool exclude_regex: Whether regex excludes or includes findings.
        :param bool added_to_task: The added to task filter. Filter findings that already have a task assigned.
        :param list[str] filter: The finding category and group filter. Notation: category/group. The group part is optional. If a category or group is given, all matching findings will be filtered out and not included in the result.
        :param bool invert: Whether to invert the category and group filter.
        :param list[str] assessment_filters: The assessment filter. All mentioned assessment colors will be filtered out and not included in the result.
        :param str blacklisted: The blacklist filtering option.
        :param str baseline: The baseline name or baseline timestamp, with regards to which the findings shall be filtered.
        :param str qualified_name: If this parameter is given, general findings and such covering the specified qualified location are returned.
        :param bool include_changed_code_findings: If this is true, findings in changed code as included as well. Only used if a baseline is provided as well.
        :param str blacklist_rationale: A pattern to be matched against the rationale for which the findings was tolerated or marked as false positive.
        :param str sort_by: The finding property by which the result is sorted. If none is given the result is not sorted. One of group, location, message, or a finding property, or random
        :param str sort_order: The sort order
        :param int start: If this parameter is given, the findings returned will start from this index (0 based), i.e. the first start findings in the list (for current sorting) will be skipped.
        :param int max: Limits the number of findings returned. If also the parameter 'all' is used, the limit is ignored. Providing no limit will use the default limit of 300.
        :param bool all: If this is true, the finding list is not truncated to 300 elements.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FindingsWithCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_abap_findings_with_http_info(project, object_type, source_object, **kwargs)  # noqa: E501

    def get_abap_findings_with_http_info(self, project, object_type, source_object, **kwargs):  # noqa: E501
        """Get ABAP findings  # noqa: E501

        Returns findings for an ABAP source object, function group, or project. The element is expected in the form OBJTYPE/OBJNAME, e.g. 'PROG/ZTEST' or 'FUGR/!ABC!MY_FUNCTION_GROUP'. This service is public API since Teamscale 5.6. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_abap_findings_with_http_info(project, object_type, source_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str object_type: (required)
        :param str source_object: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str regex: The regex filter. Filters findings by this regex. Considered Fields are Message and Location. Matches will be included in the result.
        :param bool exclude_regex: Whether regex excludes or includes findings.
        :param bool added_to_task: The added to task filter. Filter findings that already have a task assigned.
        :param list[str] filter: The finding category and group filter. Notation: category/group. The group part is optional. If a category or group is given, all matching findings will be filtered out and not included in the result.
        :param bool invert: Whether to invert the category and group filter.
        :param list[str] assessment_filters: The assessment filter. All mentioned assessment colors will be filtered out and not included in the result.
        :param str blacklisted: The blacklist filtering option.
        :param str baseline: The baseline name or baseline timestamp, with regards to which the findings shall be filtered.
        :param str qualified_name: If this parameter is given, general findings and such covering the specified qualified location are returned.
        :param bool include_changed_code_findings: If this is true, findings in changed code as included as well. Only used if a baseline is provided as well.
        :param str blacklist_rationale: A pattern to be matched against the rationale for which the findings was tolerated or marked as false positive.
        :param str sort_by: The finding property by which the result is sorted. If none is given the result is not sorted. One of group, location, message, or a finding property, or random
        :param str sort_order: The sort order
        :param int start: If this parameter is given, the findings returned will start from this index (0 based), i.e. the first start findings in the list (for current sorting) will be skipped.
        :param int max: Limits the number of findings returned. If also the parameter 'all' is used, the limit is ignored. Providing no limit will use the default limit of 300.
        :param bool all: If this is true, the finding list is not truncated to 300 elements.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FindingsWithCount, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'object_type',
            'source_object',
            't',
            'regex',
            'exclude_regex',
            'added_to_task',
            'filter',
            'invert',
            'assessment_filters',
            'blacklisted',
            'baseline',
            'qualified_name',
            'include_changed_code_findings',
            'blacklist_rationale',
            'sort_by',
            'sort_order',
            'start',
            'max',
            'all'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_abap_findings" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `get_abap_findings`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['object_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `object_type` when calling `get_abap_findings`")  # noqa: E501
        # verify the required parameter 'source_object' is set
        if self.api_client.client_side_validation and ('source_object' not in local_var_params or  # noqa: E501
                                                        local_var_params['source_object'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `source_object` when calling `get_abap_findings`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `get_abap_findings`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `get_abap_findings`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501
        if 'object_type' in local_var_params:
            path_params['objectType'] = local_var_params['object_type']  # noqa: E501
        if 'source_object' in local_var_params:
            path_params['sourceObject'] = local_var_params['source_object']  # noqa: E501

        query_params = []
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501
        if 'regex' in local_var_params and local_var_params['regex'] is not None:  # noqa: E501
            query_params.append(('regex', local_var_params['regex']))  # noqa: E501
        if 'exclude_regex' in local_var_params and local_var_params['exclude_regex'] is not None:  # noqa: E501
            query_params.append(('exclude-regex', local_var_params['exclude_regex']))  # noqa: E501
        if 'added_to_task' in local_var_params and local_var_params['added_to_task'] is not None:  # noqa: E501
            query_params.append(('added-to-task', local_var_params['added_to_task']))  # noqa: E501
        if 'filter' in local_var_params and local_var_params['filter'] is not None:  # noqa: E501
            query_params.append(('filter', local_var_params['filter']))  # noqa: E501
            collection_formats['filter'] = 'multi'  # noqa: E501
        if 'invert' in local_var_params and local_var_params['invert'] is not None:  # noqa: E501
            query_params.append(('invert', local_var_params['invert']))  # noqa: E501
        if 'assessment_filters' in local_var_params and local_var_params['assessment_filters'] is not None:  # noqa: E501
            query_params.append(('assessment-filters', local_var_params['assessment_filters']))  # noqa: E501
            collection_formats['assessment-filters'] = 'multi'  # noqa: E501
        if 'blacklisted' in local_var_params and local_var_params['blacklisted'] is not None:  # noqa: E501
            query_params.append(('blacklisted', local_var_params['blacklisted']))  # noqa: E501
        if 'baseline' in local_var_params and local_var_params['baseline'] is not None:  # noqa: E501
            query_params.append(('baseline', local_var_params['baseline']))  # noqa: E501
        if 'qualified_name' in local_var_params and local_var_params['qualified_name'] is not None:  # noqa: E501
            query_params.append(('qualified-name', local_var_params['qualified_name']))  # noqa: E501
        if 'include_changed_code_findings' in local_var_params and local_var_params['include_changed_code_findings'] is not None:  # noqa: E501
            query_params.append(('include-changed-code-findings', local_var_params['include_changed_code_findings']))  # noqa: E501
        if 'blacklist_rationale' in local_var_params and local_var_params['blacklist_rationale'] is not None:  # noqa: E501
            query_params.append(('blacklistRationale', local_var_params['blacklist_rationale']))  # noqa: E501
        if 'sort_by' in local_var_params and local_var_params['sort_by'] is not None:  # noqa: E501
            query_params.append(('sort-by', local_var_params['sort_by']))  # noqa: E501
        if 'sort_order' in local_var_params and local_var_params['sort_order'] is not None:  # noqa: E501
            query_params.append(('sort-order', local_var_params['sort_order']))  # noqa: E501
        if 'start' in local_var_params and local_var_params['start'] is not None:  # noqa: E501
            query_params.append(('start', local_var_params['start']))  # noqa: E501
        if 'max' in local_var_params and local_var_params['max'] is not None:  # noqa: E501
            query_params.append(('max', local_var_params['max']))  # noqa: E501
        if 'all' in local_var_params and local_var_params['all'] is not None:  # noqa: E501
            query_params.append(('all', local_var_params['all']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/xml', 'application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/findings/abap/{objectType}/{sourceObject}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FindingsWithCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_abap_findings1(self, project, **kwargs):  # noqa: E501
        """Get all ABAP findings  # noqa: E501

        Returns all findings for the given project. This service is public API since Teamscale 5.6. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_abap_findings1(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str regex: The regex filter. Filters findings by this regex. Considered Fields are Message and Location. Matches will be included in the result.
        :param bool exclude_regex: Whether regex excludes or includes findings.
        :param bool added_to_task: The added to task filter. Filter findings that already have a task assigned.
        :param list[str] filter: The finding category and group filter. Notation: category/group. The group part is optional. If a category or group is given, all matching findings will be filtered out and not included in the result.
        :param bool invert: Whether to invert the category and group filter.
        :param list[str] assessment_filters: The assessment filter. All mentioned assessment colors will be filtered out and not included in the result.
        :param str blacklisted: The blacklist filtering option.
        :param str baseline: The baseline name or baseline timestamp, with regards to which the findings shall be filtered.
        :param str qualified_name: If this parameter is given, general findings and such covering the specified qualified location are returned.
        :param bool include_changed_code_findings: If this is true, findings in changed code as included as well. Only used if a baseline is provided as well.
        :param str blacklist_rationale: A pattern to be matched against the rationale for which the findings was tolerated or marked as false positive.
        :param str sort_by: The finding property by which the result is sorted. If none is given the result is not sorted. One of group, location, message, or a finding property, or random
        :param str sort_order: The sort order
        :param int start: If this parameter is given, the findings returned will start from this index (0 based), i.e. the first start findings in the list (for current sorting) will be skipped.
        :param int max: Limits the number of findings returned. If also the parameter 'all' is used, the limit is ignored. Providing no limit will use the default limit of 300.
        :param bool all: If this is true, the finding list is not truncated to 300 elements.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FindingsWithCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_abap_findings1_with_http_info(project, **kwargs)  # noqa: E501

    def get_abap_findings1_with_http_info(self, project, **kwargs):  # noqa: E501
        """Get all ABAP findings  # noqa: E501

        Returns all findings for the given project. This service is public API since Teamscale 5.6. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_abap_findings1_with_http_info(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str regex: The regex filter. Filters findings by this regex. Considered Fields are Message and Location. Matches will be included in the result.
        :param bool exclude_regex: Whether regex excludes or includes findings.
        :param bool added_to_task: The added to task filter. Filter findings that already have a task assigned.
        :param list[str] filter: The finding category and group filter. Notation: category/group. The group part is optional. If a category or group is given, all matching findings will be filtered out and not included in the result.
        :param bool invert: Whether to invert the category and group filter.
        :param list[str] assessment_filters: The assessment filter. All mentioned assessment colors will be filtered out and not included in the result.
        :param str blacklisted: The blacklist filtering option.
        :param str baseline: The baseline name or baseline timestamp, with regards to which the findings shall be filtered.
        :param str qualified_name: If this parameter is given, general findings and such covering the specified qualified location are returned.
        :param bool include_changed_code_findings: If this is true, findings in changed code as included as well. Only used if a baseline is provided as well.
        :param str blacklist_rationale: A pattern to be matched against the rationale for which the findings was tolerated or marked as false positive.
        :param str sort_by: The finding property by which the result is sorted. If none is given the result is not sorted. One of group, location, message, or a finding property, or random
        :param str sort_order: The sort order
        :param int start: If this parameter is given, the findings returned will start from this index (0 based), i.e. the first start findings in the list (for current sorting) will be skipped.
        :param int max: Limits the number of findings returned. If also the parameter 'all' is used, the limit is ignored. Providing no limit will use the default limit of 300.
        :param bool all: If this is true, the finding list is not truncated to 300 elements.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FindingsWithCount, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            't',
            'regex',
            'exclude_regex',
            'added_to_task',
            'filter',
            'invert',
            'assessment_filters',
            'blacklisted',
            'baseline',
            'qualified_name',
            'include_changed_code_findings',
            'blacklist_rationale',
            'sort_by',
            'sort_order',
            'start',
            'max',
            'all'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_abap_findings1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `get_abap_findings1`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `get_abap_findings1`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `get_abap_findings1`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501
        if 'regex' in local_var_params and local_var_params['regex'] is not None:  # noqa: E501
            query_params.append(('regex', local_var_params['regex']))  # noqa: E501
        if 'exclude_regex' in local_var_params and local_var_params['exclude_regex'] is not None:  # noqa: E501
            query_params.append(('exclude-regex', local_var_params['exclude_regex']))  # noqa: E501
        if 'added_to_task' in local_var_params and local_var_params['added_to_task'] is not None:  # noqa: E501
            query_params.append(('added-to-task', local_var_params['added_to_task']))  # noqa: E501
        if 'filter' in local_var_params and local_var_params['filter'] is not None:  # noqa: E501
            query_params.append(('filter', local_var_params['filter']))  # noqa: E501
            collection_formats['filter'] = 'multi'  # noqa: E501
        if 'invert' in local_var_params and local_var_params['invert'] is not None:  # noqa: E501
            query_params.append(('invert', local_var_params['invert']))  # noqa: E501
        if 'assessment_filters' in local_var_params and local_var_params['assessment_filters'] is not None:  # noqa: E501
            query_params.append(('assessment-filters', local_var_params['assessment_filters']))  # noqa: E501
            collection_formats['assessment-filters'] = 'multi'  # noqa: E501
        if 'blacklisted' in local_var_params and local_var_params['blacklisted'] is not None:  # noqa: E501
            query_params.append(('blacklisted', local_var_params['blacklisted']))  # noqa: E501
        if 'baseline' in local_var_params and local_var_params['baseline'] is not None:  # noqa: E501
            query_params.append(('baseline', local_var_params['baseline']))  # noqa: E501
        if 'qualified_name' in local_var_params and local_var_params['qualified_name'] is not None:  # noqa: E501
            query_params.append(('qualified-name', local_var_params['qualified_name']))  # noqa: E501
        if 'include_changed_code_findings' in local_var_params and local_var_params['include_changed_code_findings'] is not None:  # noqa: E501
            query_params.append(('include-changed-code-findings', local_var_params['include_changed_code_findings']))  # noqa: E501
        if 'blacklist_rationale' in local_var_params and local_var_params['blacklist_rationale'] is not None:  # noqa: E501
            query_params.append(('blacklistRationale', local_var_params['blacklist_rationale']))  # noqa: E501
        if 'sort_by' in local_var_params and local_var_params['sort_by'] is not None:  # noqa: E501
            query_params.append(('sort-by', local_var_params['sort_by']))  # noqa: E501
        if 'sort_order' in local_var_params and local_var_params['sort_order'] is not None:  # noqa: E501
            query_params.append(('sort-order', local_var_params['sort_order']))  # noqa: E501
        if 'start' in local_var_params and local_var_params['start'] is not None:  # noqa: E501
            query_params.append(('start', local_var_params['start']))  # noqa: E501
        if 'max' in local_var_params and local_var_params['max'] is not None:  # noqa: E501
            query_params.append(('max', local_var_params['max']))  # noqa: E501
        if 'all' in local_var_params and local_var_params['all'] is not None:  # noqa: E501
            query_params.append(('all', local_var_params['all']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/xml', 'application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/findings/abap', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FindingsWithCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lookup_project_by_sap_system_id(self, sap_system_id, **kwargs):  # noqa: E501
        """Get projects corresponding to given SAP system ID.  # noqa: E501

        Looks up Teamscale projects by SAP System ID. Returns project aliases or project IDs if no alias available. This service is public API since Teamscale 5.7. The service will only search among projects visible to current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lookup_project_by_sap_system_id(sap_system_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sap_system_id: System ID of SAP system (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.lookup_project_by_sap_system_id_with_http_info(sap_system_id, **kwargs)  # noqa: E501

    def lookup_project_by_sap_system_id_with_http_info(self, sap_system_id, **kwargs):  # noqa: E501
        """Get projects corresponding to given SAP system ID.  # noqa: E501

        Looks up Teamscale projects by SAP System ID. Returns project aliases or project IDs if no alias available. This service is public API since Teamscale 5.7. The service will only search among projects visible to current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lookup_project_by_sap_system_id_with_http_info(sap_system_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sap_system_id: System ID of SAP system (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sap_system_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lookup_project_by_sap_system_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sap_system_id' is set
        if self.api_client.client_side_validation and ('sap_system_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sap_system_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sap_system_id` when calling `lookup_project_by_sap_system_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sap_system_id' in local_var_params:
            path_params['sap-system-id'] = local_var_params['sap_system_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects-by-sap-system-id/{sap-system-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
