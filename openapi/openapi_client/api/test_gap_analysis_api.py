# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class TestGapAnalysisApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_tga_percentage(self, project, **kwargs):  # noqa: E501
        """Get test gap percentage  # noqa: E501

        Calculates the TGA percentage for the given uniform path or the given issue ID. This service is public API since Teamscale 5.9.6. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tga_percentage(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param bool auto_select_branch: Will auto-select the issue branch if set to true. Otherwise, if given, the branchName will be used. As fallback the default branch will be used.
        :param str branch_name: If this is given, all issues are shown on this branch. Otherwise, the branch is auto-determined for each issue separately.
        :param bool include_child_issues: Will include changes introduced by child issues.
        :param str end: The end timestamp (inclusive).
        :param str baseline: The baseline timestamp (inclusive).
        :param bool only_executed_methods: If this parameter is given, the service disregards code changes and only assesses execution of methods.
        :param str issue_id: If this parameter is given and is a valid issue ID, information about all methods changed in the context of this issue ID will be returned. In this case, the baseline parameter is ignored (the baseline is determined automatically for the issue instead). If the special value [no-issue] is given, instead all methods that were changed in commits without an issue link between the baseline and end date are returned.
        :param bool merge_request_mode: If this is true, we will compute TGA information based on the methods changed in the history of commit1 but not in the history of commit2. This simulates a merge from commit1 to commit2.
        :param str uniform_path: Uniform path for which the request should be created
        :param str merge_base_cache_key: Optional key into the cache index for merge base calculation. If this is known it can be used to speed up calculation of the merge base.
        :param bool all_partitions: If this is true, all available test coverage partitions are considered.
        :param list[str] partitions: This parameter may be given multiple times. Specifies the test coverage partitions to consider.
        :param list[str] cross_annotation_projects: This parameter may be given multiple times. Specifies further Teamscale projects from which to consider test coverage.
        :param bool execution_only: If this parameter is given, the service disregards code changes and only assesses execution of methods.
        :param bool churn: Whether we want to view only the churn
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_tga_percentage_with_http_info(project, **kwargs)  # noqa: E501

    def get_tga_percentage_with_http_info(self, project, **kwargs):  # noqa: E501
        """Get test gap percentage  # noqa: E501

        Calculates the TGA percentage for the given uniform path or the given issue ID. This service is public API since Teamscale 5.9.6. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tga_percentage_with_http_info(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param bool auto_select_branch: Will auto-select the issue branch if set to true. Otherwise, if given, the branchName will be used. As fallback the default branch will be used.
        :param str branch_name: If this is given, all issues are shown on this branch. Otherwise, the branch is auto-determined for each issue separately.
        :param bool include_child_issues: Will include changes introduced by child issues.
        :param str end: The end timestamp (inclusive).
        :param str baseline: The baseline timestamp (inclusive).
        :param bool only_executed_methods: If this parameter is given, the service disregards code changes and only assesses execution of methods.
        :param str issue_id: If this parameter is given and is a valid issue ID, information about all methods changed in the context of this issue ID will be returned. In this case, the baseline parameter is ignored (the baseline is determined automatically for the issue instead). If the special value [no-issue] is given, instead all methods that were changed in commits without an issue link between the baseline and end date are returned.
        :param bool merge_request_mode: If this is true, we will compute TGA information based on the methods changed in the history of commit1 but not in the history of commit2. This simulates a merge from commit1 to commit2.
        :param str uniform_path: Uniform path for which the request should be created
        :param str merge_base_cache_key: Optional key into the cache index for merge base calculation. If this is known it can be used to speed up calculation of the merge base.
        :param bool all_partitions: If this is true, all available test coverage partitions are considered.
        :param list[str] partitions: This parameter may be given multiple times. Specifies the test coverage partitions to consider.
        :param list[str] cross_annotation_projects: This parameter may be given multiple times. Specifies further Teamscale projects from which to consider test coverage.
        :param bool execution_only: If this parameter is given, the service disregards code changes and only assesses execution of methods.
        :param bool churn: Whether we want to view only the churn
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(float, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'auto_select_branch',
            'branch_name',
            'include_child_issues',
            'end',
            'baseline',
            'only_executed_methods',
            'issue_id',
            'merge_request_mode',
            'uniform_path',
            'merge_base_cache_key',
            'all_partitions',
            'partitions',
            'cross_annotation_projects',
            'execution_only',
            'churn'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tga_percentage" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `get_tga_percentage`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `get_tga_percentage`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'end' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['end']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `end` when calling `get_tga_percentage`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        if self.api_client.client_side_validation and 'baseline' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['baseline']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `baseline` when calling `get_tga_percentage`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 'auto_select_branch' in local_var_params and local_var_params['auto_select_branch'] is not None:  # noqa: E501
            query_params.append(('auto-select-branch', local_var_params['auto_select_branch']))  # noqa: E501
        if 'branch_name' in local_var_params and local_var_params['branch_name'] is not None:  # noqa: E501
            query_params.append(('branch-name', local_var_params['branch_name']))  # noqa: E501
        if 'include_child_issues' in local_var_params and local_var_params['include_child_issues'] is not None:  # noqa: E501
            query_params.append(('include-child-issues', local_var_params['include_child_issues']))  # noqa: E501
        if 'end' in local_var_params and local_var_params['end'] is not None:  # noqa: E501
            query_params.append(('end', local_var_params['end']))  # noqa: E501
        if 'baseline' in local_var_params and local_var_params['baseline'] is not None:  # noqa: E501
            query_params.append(('baseline', local_var_params['baseline']))  # noqa: E501
        if 'only_executed_methods' in local_var_params and local_var_params['only_executed_methods'] is not None:  # noqa: E501
            query_params.append(('only-executed-methods', local_var_params['only_executed_methods']))  # noqa: E501
        if 'issue_id' in local_var_params and local_var_params['issue_id'] is not None:  # noqa: E501
            query_params.append(('issue-id', local_var_params['issue_id']))  # noqa: E501
        if 'merge_request_mode' in local_var_params and local_var_params['merge_request_mode'] is not None:  # noqa: E501
            query_params.append(('merge-request-mode', local_var_params['merge_request_mode']))  # noqa: E501
        if 'uniform_path' in local_var_params and local_var_params['uniform_path'] is not None:  # noqa: E501
            query_params.append(('uniform-path', local_var_params['uniform_path']))  # noqa: E501
        if 'merge_base_cache_key' in local_var_params and local_var_params['merge_base_cache_key'] is not None:  # noqa: E501
            query_params.append(('merge-base-cache-key', local_var_params['merge_base_cache_key']))  # noqa: E501
        if 'all_partitions' in local_var_params and local_var_params['all_partitions'] is not None:  # noqa: E501
            query_params.append(('all-partitions', local_var_params['all_partitions']))  # noqa: E501
        if 'partitions' in local_var_params and local_var_params['partitions'] is not None:  # noqa: E501
            query_params.append(('partitions', local_var_params['partitions']))  # noqa: E501
            collection_formats['partitions'] = 'multi'  # noqa: E501
        if 'cross_annotation_projects' in local_var_params and local_var_params['cross_annotation_projects'] is not None:  # noqa: E501
            query_params.append(('cross-annotation-projects', local_var_params['cross_annotation_projects']))  # noqa: E501
            collection_formats['cross-annotation-projects'] = 'multi'  # noqa: E501
        if 'execution_only' in local_var_params and local_var_params['execution_only'] is not None:  # noqa: E501
            query_params.append(('execution-only', local_var_params['execution_only']))  # noqa: E501
        if 'churn' in local_var_params and local_var_params['churn'] is not None:  # noqa: E501
            query_params.append(('churn', local_var_params['churn']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/test-gaps/percentage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='float',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_tga_percentage(self, project, **kwargs):  # noqa: E501
        """Get test gap percentage  # noqa: E501

        Calculates the TGA percentage for the given uniform path or the given issue ID. This service is public API since Teamscale 5.9.6. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tga_percentage(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param bool auto_select_branch: Will auto-select the issue branch if set to true. Otherwise, if given, the branchName will be used. As fallback the default branch will be used.
        :param str branch_name: If this is given, all issues are shown on this branch. Otherwise, the branch is auto-determined for each issue separately.
        :param bool include_child_issues: Will include changes introduced by child issues.
        :param str end: The end timestamp (inclusive).
        :param str baseline: The baseline timestamp (inclusive).
        :param bool only_executed_methods: If this parameter is given, the service disregards code changes and only assesses execution of methods.
        :param str issue_id: If this parameter is given and is a valid issue ID, information about all methods changed in the context of this issue ID will be returned. In this case, the baseline parameter is ignored (the baseline is determined automatically for the issue instead). If the special value [no-issue] is given, instead all methods that were changed in commits without an issue link between the baseline and end date are returned.
        :param bool merge_request_mode: If this is true, we will compute TGA information based on the methods changed in the history of commit1 but not in the history of commit2. This simulates a merge from commit1 to commit2.
        :param str uniform_path: Uniform path for which the request should be created
        :param str merge_base_cache_key: Optional key into the cache index for merge base calculation. If this is known it can be used to speed up calculation of the merge base.
        :param InlineObject2 inline_object2:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.post_tga_percentage_with_http_info(project, **kwargs)  # noqa: E501

    def post_tga_percentage_with_http_info(self, project, **kwargs):  # noqa: E501
        """Get test gap percentage  # noqa: E501

        Calculates the TGA percentage for the given uniform path or the given issue ID. This service is public API since Teamscale 5.9.6. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tga_percentage_with_http_info(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param bool auto_select_branch: Will auto-select the issue branch if set to true. Otherwise, if given, the branchName will be used. As fallback the default branch will be used.
        :param str branch_name: If this is given, all issues are shown on this branch. Otherwise, the branch is auto-determined for each issue separately.
        :param bool include_child_issues: Will include changes introduced by child issues.
        :param str end: The end timestamp (inclusive).
        :param str baseline: The baseline timestamp (inclusive).
        :param bool only_executed_methods: If this parameter is given, the service disregards code changes and only assesses execution of methods.
        :param str issue_id: If this parameter is given and is a valid issue ID, information about all methods changed in the context of this issue ID will be returned. In this case, the baseline parameter is ignored (the baseline is determined automatically for the issue instead). If the special value [no-issue] is given, instead all methods that were changed in commits without an issue link between the baseline and end date are returned.
        :param bool merge_request_mode: If this is true, we will compute TGA information based on the methods changed in the history of commit1 but not in the history of commit2. This simulates a merge from commit1 to commit2.
        :param str uniform_path: Uniform path for which the request should be created
        :param str merge_base_cache_key: Optional key into the cache index for merge base calculation. If this is known it can be used to speed up calculation of the merge base.
        :param InlineObject2 inline_object2:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(float, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'auto_select_branch',
            'branch_name',
            'include_child_issues',
            'end',
            'baseline',
            'only_executed_methods',
            'issue_id',
            'merge_request_mode',
            'uniform_path',
            'merge_base_cache_key',
            'inline_object2'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_tga_percentage" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `post_tga_percentage`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `post_tga_percentage`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'end' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['end']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `end` when calling `post_tga_percentage`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        if self.api_client.client_side_validation and 'baseline' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['baseline']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `baseline` when calling `post_tga_percentage`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 'auto_select_branch' in local_var_params and local_var_params['auto_select_branch'] is not None:  # noqa: E501
            query_params.append(('auto-select-branch', local_var_params['auto_select_branch']))  # noqa: E501
        if 'branch_name' in local_var_params and local_var_params['branch_name'] is not None:  # noqa: E501
            query_params.append(('branch-name', local_var_params['branch_name']))  # noqa: E501
        if 'include_child_issues' in local_var_params and local_var_params['include_child_issues'] is not None:  # noqa: E501
            query_params.append(('include-child-issues', local_var_params['include_child_issues']))  # noqa: E501
        if 'end' in local_var_params and local_var_params['end'] is not None:  # noqa: E501
            query_params.append(('end', local_var_params['end']))  # noqa: E501
        if 'baseline' in local_var_params and local_var_params['baseline'] is not None:  # noqa: E501
            query_params.append(('baseline', local_var_params['baseline']))  # noqa: E501
        if 'only_executed_methods' in local_var_params and local_var_params['only_executed_methods'] is not None:  # noqa: E501
            query_params.append(('only-executed-methods', local_var_params['only_executed_methods']))  # noqa: E501
        if 'issue_id' in local_var_params and local_var_params['issue_id'] is not None:  # noqa: E501
            query_params.append(('issue-id', local_var_params['issue_id']))  # noqa: E501
        if 'merge_request_mode' in local_var_params and local_var_params['merge_request_mode'] is not None:  # noqa: E501
            query_params.append(('merge-request-mode', local_var_params['merge_request_mode']))  # noqa: E501
        if 'uniform_path' in local_var_params and local_var_params['uniform_path'] is not None:  # noqa: E501
            query_params.append(('uniform-path', local_var_params['uniform_path']))  # noqa: E501
        if 'merge_base_cache_key' in local_var_params and local_var_params['merge_base_cache_key'] is not None:  # noqa: E501
            query_params.append(('merge-base-cache-key', local_var_params['merge_base_cache_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inline_object2' in local_var_params:
            body_params = local_var_params['inline_object2']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/test-gaps/percentage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='float',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
