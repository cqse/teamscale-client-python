# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ExternalMetricsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_external_metrics(self, metric_schema_change_entry, **kwargs):  # noqa: E501
        """Add metrics  # noqa: E501

        Adds a set of external metrics to the schema. This service is public API since Teamscale 5.8. The API requires the user to have Edit External Metrics Schema permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_external_metrics(metric_schema_change_entry, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[MetricSchemaChangeEntry] metric_schema_change_entry: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.add_external_metrics_with_http_info(metric_schema_change_entry, **kwargs)  # noqa: E501

    def add_external_metrics_with_http_info(self, metric_schema_change_entry, **kwargs):  # noqa: E501
        """Add metrics  # noqa: E501

        Adds a set of external metrics to the schema. This service is public API since Teamscale 5.8. The API requires the user to have Edit External Metrics Schema permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_external_metrics_with_http_info(metric_schema_change_entry, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[MetricSchemaChangeEntry] metric_schema_change_entry: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'metric_schema_change_entry'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_external_metrics" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'metric_schema_change_entry' is set
        if self.api_client.client_side_validation and ('metric_schema_change_entry' not in local_var_params or  # noqa: E501
                                                        local_var_params['metric_schema_change_entry'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `metric_schema_change_entry` when calling `add_external_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'metric_schema_change_entry' in local_var_params:
            body_params = local_var_params['metric_schema_change_entry']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/external-metrics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_external_metrics(self, project, session_id, external_metrics_entry, **kwargs):  # noqa: E501
        """Upload external metrics  # noqa: E501

        Adds external metrics to the session. For performance reasons, it is recommended to batch calls to this service, i.e. not commit all files using single calls. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_external_metrics(project, session_id, external_metrics_entry, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str session_id: If session ID is provided, the results will be appended to the given session instead of creating a new session. Use \"auto-create\" in place of session ID to create a new session, perform upload and commit session in one step. (required)
        :param list[ExternalMetricsEntry] external_metrics_entry: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str revision: This parameter allows to pass a revision instead of a timestamp.
        :param str repository: This parameter allows to pass a repository name
        :param str message: A message that describes the external analysis, similar to a commit message.
        :param str partition: The name of the logical partition to store the results into. All existing data in this partition will be invalidated. A partition typically corresponds to one analysis run, i.e. if there are two independent builds/runs, they must use different partitions.
        :param bool movetolastcommit: Whether to move the upload timestamp to right after the last commit.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.upload_external_metrics_with_http_info(project, session_id, external_metrics_entry, **kwargs)  # noqa: E501

    def upload_external_metrics_with_http_info(self, project, session_id, external_metrics_entry, **kwargs):  # noqa: E501
        """Upload external metrics  # noqa: E501

        Adds external metrics to the session. For performance reasons, it is recommended to batch calls to this service, i.e. not commit all files using single calls. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_external_metrics_with_http_info(project, session_id, external_metrics_entry, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str session_id: If session ID is provided, the results will be appended to the given session instead of creating a new session. Use \"auto-create\" in place of session ID to create a new session, perform upload and commit session in one step. (required)
        :param list[ExternalMetricsEntry] external_metrics_entry: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str revision: This parameter allows to pass a revision instead of a timestamp.
        :param str repository: This parameter allows to pass a repository name
        :param str message: A message that describes the external analysis, similar to a commit message.
        :param str partition: The name of the logical partition to store the results into. All existing data in this partition will be invalidated. A partition typically corresponds to one analysis run, i.e. if there are two independent builds/runs, they must use different partitions.
        :param bool movetolastcommit: Whether to move the upload timestamp to right after the last commit.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'session_id',
            'external_metrics_entry',
            't',
            'revision',
            'repository',
            'message',
            'partition',
            'movetolastcommit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_external_metrics" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `upload_external_metrics`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if self.api_client.client_side_validation and ('session_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_id` when calling `upload_external_metrics`")  # noqa: E501
        # verify the required parameter 'external_metrics_entry' is set
        if self.api_client.client_side_validation and ('external_metrics_entry' not in local_var_params or  # noqa: E501
                                                        local_var_params['external_metrics_entry'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `external_metrics_entry` when calling `upload_external_metrics`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `upload_external_metrics`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `upload_external_metrics`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501
        if 'session_id' in local_var_params:
            path_params['sessionId'] = local_var_params['session_id']  # noqa: E501

        query_params = []
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501
        if 'revision' in local_var_params and local_var_params['revision'] is not None:  # noqa: E501
            query_params.append(('revision', local_var_params['revision']))  # noqa: E501
        if 'repository' in local_var_params and local_var_params['repository'] is not None:  # noqa: E501
            query_params.append(('repository', local_var_params['repository']))  # noqa: E501
        if 'message' in local_var_params and local_var_params['message'] is not None:  # noqa: E501
            query_params.append(('message', local_var_params['message']))  # noqa: E501
        if 'partition' in local_var_params and local_var_params['partition'] is not None:  # noqa: E501
            query_params.append(('partition', local_var_params['partition']))  # noqa: E501
        if 'movetolastcommit' in local_var_params and local_var_params['movetolastcommit'] is not None:  # noqa: E501
            query_params.append(('movetolastcommit', local_var_params['movetolastcommit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'external_metrics_entry' in local_var_params:
            body_params = local_var_params['external_metrics_entry']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/external-analysis/session/{sessionId}/external-metrics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_non_code_metrics(self, project, session_id, non_code_metrics_entry, **kwargs):  # noqa: E501
        """Upload non-code metrics  # noqa: E501

        Adds non-code metrics to the session. For performance reasons, it is recommended to batch calls to this service, i.e. not commit all files using single calls. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_non_code_metrics(project, session_id, non_code_metrics_entry, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str session_id: If session ID is provided, the results will be appended to the given session instead of creating a new session. Use \"auto-create\" in place of session ID to create a new session, perform upload and commit session in one step. (required)
        :param list[NonCodeMetricsEntry] non_code_metrics_entry: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str revision: This parameter allows to pass a revision instead of a timestamp.
        :param str repository: This parameter allows to pass a repository name
        :param str message: A message that describes the external analysis, similar to a commit message.
        :param str partition: The name of the logical partition to store the results into. All existing data in this partition will be invalidated. A partition typically corresponds to one analysis run, i.e. if there are two independent builds/runs, they must use different partitions.
        :param bool movetolastcommit: Whether to move the upload timestamp to right after the last commit.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.upload_non_code_metrics_with_http_info(project, session_id, non_code_metrics_entry, **kwargs)  # noqa: E501

    def upload_non_code_metrics_with_http_info(self, project, session_id, non_code_metrics_entry, **kwargs):  # noqa: E501
        """Upload non-code metrics  # noqa: E501

        Adds non-code metrics to the session. For performance reasons, it is recommended to batch calls to this service, i.e. not commit all files using single calls. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_non_code_metrics_with_http_info(project, session_id, non_code_metrics_entry, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str session_id: If session ID is provided, the results will be appended to the given session instead of creating a new session. Use \"auto-create\" in place of session ID to create a new session, perform upload and commit session in one step. (required)
        :param list[NonCodeMetricsEntry] non_code_metrics_entry: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str revision: This parameter allows to pass a revision instead of a timestamp.
        :param str repository: This parameter allows to pass a repository name
        :param str message: A message that describes the external analysis, similar to a commit message.
        :param str partition: The name of the logical partition to store the results into. All existing data in this partition will be invalidated. A partition typically corresponds to one analysis run, i.e. if there are two independent builds/runs, they must use different partitions.
        :param bool movetolastcommit: Whether to move the upload timestamp to right after the last commit.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'session_id',
            'non_code_metrics_entry',
            't',
            'revision',
            'repository',
            'message',
            'partition',
            'movetolastcommit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_non_code_metrics" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `upload_non_code_metrics`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if self.api_client.client_side_validation and ('session_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_id` when calling `upload_non_code_metrics`")  # noqa: E501
        # verify the required parameter 'non_code_metrics_entry' is set
        if self.api_client.client_side_validation and ('non_code_metrics_entry' not in local_var_params or  # noqa: E501
                                                        local_var_params['non_code_metrics_entry'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `non_code_metrics_entry` when calling `upload_non_code_metrics`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `upload_non_code_metrics`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `upload_non_code_metrics`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501
        if 'session_id' in local_var_params:
            path_params['sessionId'] = local_var_params['session_id']  # noqa: E501

        query_params = []
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501
        if 'revision' in local_var_params and local_var_params['revision'] is not None:  # noqa: E501
            query_params.append(('revision', local_var_params['revision']))  # noqa: E501
        if 'repository' in local_var_params and local_var_params['repository'] is not None:  # noqa: E501
            query_params.append(('repository', local_var_params['repository']))  # noqa: E501
        if 'message' in local_var_params and local_var_params['message'] is not None:  # noqa: E501
            query_params.append(('message', local_var_params['message']))  # noqa: E501
        if 'partition' in local_var_params and local_var_params['partition'] is not None:  # noqa: E501
            query_params.append(('partition', local_var_params['partition']))  # noqa: E501
        if 'movetolastcommit' in local_var_params and local_var_params['movetolastcommit'] is not None:  # noqa: E501
            query_params.append(('movetolastcommit', local_var_params['movetolastcommit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'non_code_metrics_entry' in local_var_params:
            body_params = local_var_params['non_code_metrics_entry']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/external-analysis/session/{sessionId}/non-code-metrics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
