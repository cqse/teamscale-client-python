# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class FindingsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_external_analysis_group(self, external_analysis_group, **kwargs):  # noqa: E501
        """Create external analysis group  # noqa: E501

        Creates a new external analysis group. This service is public API since Teamscale 6.0. The API requires the user to have Edit External Findings Schema permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_external_analysis_group(external_analysis_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param ExternalAnalysisGroup external_analysis_group: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_external_analysis_group_with_http_info(external_analysis_group, **kwargs)  # noqa: E501

    def create_external_analysis_group_with_http_info(self, external_analysis_group, **kwargs):  # noqa: E501
        """Create external analysis group  # noqa: E501

        Creates a new external analysis group. This service is public API since Teamscale 6.0. The API requires the user to have Edit External Findings Schema permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_external_analysis_group_with_http_info(external_analysis_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param ExternalAnalysisGroup external_analysis_group: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'external_analysis_group'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_external_analysis_group" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'external_analysis_group' is set
        if self.api_client.client_side_validation and ('external_analysis_group' not in local_var_params or  # noqa: E501
                                                        local_var_params['external_analysis_group'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `external_analysis_group` when calling `create_external_analysis_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'external_analysis_group' in local_var_params:
            body_params = local_var_params['external_analysis_group']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/external-findings/groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_external_finding_description(self, external_findings_description, **kwargs):  # noqa: E501
        """Create external finding description  # noqa: E501

        Create a new external finding description in the system. This service is public API since Teamscale 6.0. The API requires the user to have Edit External Findings Schema permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_external_finding_description(external_findings_description, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param ExternalFindingsDescription external_findings_description: (required)
        :param str analysis_tool: Parameter name for specifying the analysis tool used
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_external_finding_description_with_http_info(external_findings_description, **kwargs)  # noqa: E501

    def create_external_finding_description_with_http_info(self, external_findings_description, **kwargs):  # noqa: E501
        """Create external finding description  # noqa: E501

        Create a new external finding description in the system. This service is public API since Teamscale 6.0. The API requires the user to have Edit External Findings Schema permissions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_external_finding_description_with_http_info(external_findings_description, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param ExternalFindingsDescription external_findings_description: (required)
        :param str analysis_tool: Parameter name for specifying the analysis tool used
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'external_findings_description',
            'analysis_tool'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_external_finding_description" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'external_findings_description' is set
        if self.api_client.client_side_validation and ('external_findings_description' not in local_var_params or  # noqa: E501
                                                        local_var_params['external_findings_description'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `external_findings_description` when calling `create_external_finding_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'analysis_tool' in local_var_params and local_var_params['analysis_tool'] is not None:  # noqa: E501
            query_params.append(('analysis-tool', local_var_params['analysis_tool']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'external_findings_description' in local_var_params:
            body_params = local_var_params['external_findings_description']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/external-findings/descriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_abap_findings(self, project, object_type, source_object, **kwargs):  # noqa: E501
        """Get ABAP findings  # noqa: E501

        Returns findings for an ABAP source object, function group, or project. The element is expected in the form OBJTYPE/OBJNAME, e.g. 'PROG/ZTEST' or 'FUGR/!ABC!MY_FUNCTION_GROUP'. This service is public API since Teamscale 5.6. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_abap_findings(project, object_type, source_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str object_type: (required)
        :param str source_object: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str regex: The regex filter. Filters findings by this regex. Considered Fields are Message and Location. Matches will be included in the result.
        :param bool exclude_regex: Whether regex excludes or includes findings.
        :param bool added_to_task: The added to task filter. Filter findings that already have a task assigned.
        :param list[str] filter: The finding category and group filter. Notation: category/group. The group part is optional. If a category or group is given, all matching findings will be filtered out and not included in the result.
        :param bool invert: Whether to invert the category and group filter.
        :param list[str] assessment_filters: The assessment filter. All mentioned assessment colors will be filtered out and not included in the result.
        :param str blacklisted: The blacklist filtering option.
        :param str baseline: The baseline name or baseline timestamp, with regards to which the findings shall be filtered.
        :param str qualified_name: If this parameter is given, general findings and such covering the specified qualified location are returned.
        :param bool include_changed_code_findings: If this is true, findings in changed code as included as well. Only used if a baseline is provided as well.
        :param str blacklist_rationale: A pattern to be matched against the rationale for which the findings was tolerated or marked as false positive.
        :param str sort_by: The finding property by which the result is sorted. If none is given the result is not sorted. One of group, location, message, or a finding property, or random
        :param str sort_order: The sort order
        :param int start: If this parameter is given, the findings returned will start from this index (0 based), i.e. the first start findings in the list (for current sorting) will be skipped.
        :param int max: Limits the number of findings returned. If also the parameter 'all' is used, the limit is ignored. Providing no limit will use the default limit of 300.
        :param bool all: If this is true, the finding list is not truncated to 300 elements.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FindingsWithCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_abap_findings_with_http_info(project, object_type, source_object, **kwargs)  # noqa: E501

    def get_abap_findings_with_http_info(self, project, object_type, source_object, **kwargs):  # noqa: E501
        """Get ABAP findings  # noqa: E501

        Returns findings for an ABAP source object, function group, or project. The element is expected in the form OBJTYPE/OBJNAME, e.g. 'PROG/ZTEST' or 'FUGR/!ABC!MY_FUNCTION_GROUP'. This service is public API since Teamscale 5.6. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_abap_findings_with_http_info(project, object_type, source_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str object_type: (required)
        :param str source_object: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str regex: The regex filter. Filters findings by this regex. Considered Fields are Message and Location. Matches will be included in the result.
        :param bool exclude_regex: Whether regex excludes or includes findings.
        :param bool added_to_task: The added to task filter. Filter findings that already have a task assigned.
        :param list[str] filter: The finding category and group filter. Notation: category/group. The group part is optional. If a category or group is given, all matching findings will be filtered out and not included in the result.
        :param bool invert: Whether to invert the category and group filter.
        :param list[str] assessment_filters: The assessment filter. All mentioned assessment colors will be filtered out and not included in the result.
        :param str blacklisted: The blacklist filtering option.
        :param str baseline: The baseline name or baseline timestamp, with regards to which the findings shall be filtered.
        :param str qualified_name: If this parameter is given, general findings and such covering the specified qualified location are returned.
        :param bool include_changed_code_findings: If this is true, findings in changed code as included as well. Only used if a baseline is provided as well.
        :param str blacklist_rationale: A pattern to be matched against the rationale for which the findings was tolerated or marked as false positive.
        :param str sort_by: The finding property by which the result is sorted. If none is given the result is not sorted. One of group, location, message, or a finding property, or random
        :param str sort_order: The sort order
        :param int start: If this parameter is given, the findings returned will start from this index (0 based), i.e. the first start findings in the list (for current sorting) will be skipped.
        :param int max: Limits the number of findings returned. If also the parameter 'all' is used, the limit is ignored. Providing no limit will use the default limit of 300.
        :param bool all: If this is true, the finding list is not truncated to 300 elements.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FindingsWithCount, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'object_type',
            'source_object',
            't',
            'regex',
            'exclude_regex',
            'added_to_task',
            'filter',
            'invert',
            'assessment_filters',
            'blacklisted',
            'baseline',
            'qualified_name',
            'include_changed_code_findings',
            'blacklist_rationale',
            'sort_by',
            'sort_order',
            'start',
            'max',
            'all'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_abap_findings" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `get_abap_findings`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['object_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `object_type` when calling `get_abap_findings`")  # noqa: E501
        # verify the required parameter 'source_object' is set
        if self.api_client.client_side_validation and ('source_object' not in local_var_params or  # noqa: E501
                                                        local_var_params['source_object'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `source_object` when calling `get_abap_findings`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `get_abap_findings`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `get_abap_findings`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501
        if 'object_type' in local_var_params:
            path_params['objectType'] = local_var_params['object_type']  # noqa: E501
        if 'source_object' in local_var_params:
            path_params['sourceObject'] = local_var_params['source_object']  # noqa: E501

        query_params = []
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501
        if 'regex' in local_var_params and local_var_params['regex'] is not None:  # noqa: E501
            query_params.append(('regex', local_var_params['regex']))  # noqa: E501
        if 'exclude_regex' in local_var_params and local_var_params['exclude_regex'] is not None:  # noqa: E501
            query_params.append(('exclude-regex', local_var_params['exclude_regex']))  # noqa: E501
        if 'added_to_task' in local_var_params and local_var_params['added_to_task'] is not None:  # noqa: E501
            query_params.append(('added-to-task', local_var_params['added_to_task']))  # noqa: E501
        if 'filter' in local_var_params and local_var_params['filter'] is not None:  # noqa: E501
            query_params.append(('filter', local_var_params['filter']))  # noqa: E501
            collection_formats['filter'] = 'multi'  # noqa: E501
        if 'invert' in local_var_params and local_var_params['invert'] is not None:  # noqa: E501
            query_params.append(('invert', local_var_params['invert']))  # noqa: E501
        if 'assessment_filters' in local_var_params and local_var_params['assessment_filters'] is not None:  # noqa: E501
            query_params.append(('assessment-filters', local_var_params['assessment_filters']))  # noqa: E501
            collection_formats['assessment-filters'] = 'multi'  # noqa: E501
        if 'blacklisted' in local_var_params and local_var_params['blacklisted'] is not None:  # noqa: E501
            query_params.append(('blacklisted', local_var_params['blacklisted']))  # noqa: E501
        if 'baseline' in local_var_params and local_var_params['baseline'] is not None:  # noqa: E501
            query_params.append(('baseline', local_var_params['baseline']))  # noqa: E501
        if 'qualified_name' in local_var_params and local_var_params['qualified_name'] is not None:  # noqa: E501
            query_params.append(('qualified-name', local_var_params['qualified_name']))  # noqa: E501
        if 'include_changed_code_findings' in local_var_params and local_var_params['include_changed_code_findings'] is not None:  # noqa: E501
            query_params.append(('include-changed-code-findings', local_var_params['include_changed_code_findings']))  # noqa: E501
        if 'blacklist_rationale' in local_var_params and local_var_params['blacklist_rationale'] is not None:  # noqa: E501
            query_params.append(('blacklistRationale', local_var_params['blacklist_rationale']))  # noqa: E501
        if 'sort_by' in local_var_params and local_var_params['sort_by'] is not None:  # noqa: E501
            query_params.append(('sort-by', local_var_params['sort_by']))  # noqa: E501
        if 'sort_order' in local_var_params and local_var_params['sort_order'] is not None:  # noqa: E501
            query_params.append(('sort-order', local_var_params['sort_order']))  # noqa: E501
        if 'start' in local_var_params and local_var_params['start'] is not None:  # noqa: E501
            query_params.append(('start', local_var_params['start']))  # noqa: E501
        if 'max' in local_var_params and local_var_params['max'] is not None:  # noqa: E501
            query_params.append(('max', local_var_params['max']))  # noqa: E501
        if 'all' in local_var_params and local_var_params['all'] is not None:  # noqa: E501
            query_params.append(('all', local_var_params['all']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/xml', 'application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/findings/abap/{objectType}/{sourceObject}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FindingsWithCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_abap_findings1(self, project, **kwargs):  # noqa: E501
        """Get all ABAP findings  # noqa: E501

        Returns all findings for the given project. This service is public API since Teamscale 5.6. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_abap_findings1(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str regex: The regex filter. Filters findings by this regex. Considered Fields are Message and Location. Matches will be included in the result.
        :param bool exclude_regex: Whether regex excludes or includes findings.
        :param bool added_to_task: The added to task filter. Filter findings that already have a task assigned.
        :param list[str] filter: The finding category and group filter. Notation: category/group. The group part is optional. If a category or group is given, all matching findings will be filtered out and not included in the result.
        :param bool invert: Whether to invert the category and group filter.
        :param list[str] assessment_filters: The assessment filter. All mentioned assessment colors will be filtered out and not included in the result.
        :param str blacklisted: The blacklist filtering option.
        :param str baseline: The baseline name or baseline timestamp, with regards to which the findings shall be filtered.
        :param str qualified_name: If this parameter is given, general findings and such covering the specified qualified location are returned.
        :param bool include_changed_code_findings: If this is true, findings in changed code as included as well. Only used if a baseline is provided as well.
        :param str blacklist_rationale: A pattern to be matched against the rationale for which the findings was tolerated or marked as false positive.
        :param str sort_by: The finding property by which the result is sorted. If none is given the result is not sorted. One of group, location, message, or a finding property, or random
        :param str sort_order: The sort order
        :param int start: If this parameter is given, the findings returned will start from this index (0 based), i.e. the first start findings in the list (for current sorting) will be skipped.
        :param int max: Limits the number of findings returned. If also the parameter 'all' is used, the limit is ignored. Providing no limit will use the default limit of 300.
        :param bool all: If this is true, the finding list is not truncated to 300 elements.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FindingsWithCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_abap_findings1_with_http_info(project, **kwargs)  # noqa: E501

    def get_abap_findings1_with_http_info(self, project, **kwargs):  # noqa: E501
        """Get all ABAP findings  # noqa: E501

        Returns all findings for the given project. This service is public API since Teamscale 5.6. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_abap_findings1_with_http_info(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str regex: The regex filter. Filters findings by this regex. Considered Fields are Message and Location. Matches will be included in the result.
        :param bool exclude_regex: Whether regex excludes or includes findings.
        :param bool added_to_task: The added to task filter. Filter findings that already have a task assigned.
        :param list[str] filter: The finding category and group filter. Notation: category/group. The group part is optional. If a category or group is given, all matching findings will be filtered out and not included in the result.
        :param bool invert: Whether to invert the category and group filter.
        :param list[str] assessment_filters: The assessment filter. All mentioned assessment colors will be filtered out and not included in the result.
        :param str blacklisted: The blacklist filtering option.
        :param str baseline: The baseline name or baseline timestamp, with regards to which the findings shall be filtered.
        :param str qualified_name: If this parameter is given, general findings and such covering the specified qualified location are returned.
        :param bool include_changed_code_findings: If this is true, findings in changed code as included as well. Only used if a baseline is provided as well.
        :param str blacklist_rationale: A pattern to be matched against the rationale for which the findings was tolerated or marked as false positive.
        :param str sort_by: The finding property by which the result is sorted. If none is given the result is not sorted. One of group, location, message, or a finding property, or random
        :param str sort_order: The sort order
        :param int start: If this parameter is given, the findings returned will start from this index (0 based), i.e. the first start findings in the list (for current sorting) will be skipped.
        :param int max: Limits the number of findings returned. If also the parameter 'all' is used, the limit is ignored. Providing no limit will use the default limit of 300.
        :param bool all: If this is true, the finding list is not truncated to 300 elements.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FindingsWithCount, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            't',
            'regex',
            'exclude_regex',
            'added_to_task',
            'filter',
            'invert',
            'assessment_filters',
            'blacklisted',
            'baseline',
            'qualified_name',
            'include_changed_code_findings',
            'blacklist_rationale',
            'sort_by',
            'sort_order',
            'start',
            'max',
            'all'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_abap_findings1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `get_abap_findings1`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `get_abap_findings1`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `get_abap_findings1`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501
        if 'regex' in local_var_params and local_var_params['regex'] is not None:  # noqa: E501
            query_params.append(('regex', local_var_params['regex']))  # noqa: E501
        if 'exclude_regex' in local_var_params and local_var_params['exclude_regex'] is not None:  # noqa: E501
            query_params.append(('exclude-regex', local_var_params['exclude_regex']))  # noqa: E501
        if 'added_to_task' in local_var_params and local_var_params['added_to_task'] is not None:  # noqa: E501
            query_params.append(('added-to-task', local_var_params['added_to_task']))  # noqa: E501
        if 'filter' in local_var_params and local_var_params['filter'] is not None:  # noqa: E501
            query_params.append(('filter', local_var_params['filter']))  # noqa: E501
            collection_formats['filter'] = 'multi'  # noqa: E501
        if 'invert' in local_var_params and local_var_params['invert'] is not None:  # noqa: E501
            query_params.append(('invert', local_var_params['invert']))  # noqa: E501
        if 'assessment_filters' in local_var_params and local_var_params['assessment_filters'] is not None:  # noqa: E501
            query_params.append(('assessment-filters', local_var_params['assessment_filters']))  # noqa: E501
            collection_formats['assessment-filters'] = 'multi'  # noqa: E501
        if 'blacklisted' in local_var_params and local_var_params['blacklisted'] is not None:  # noqa: E501
            query_params.append(('blacklisted', local_var_params['blacklisted']))  # noqa: E501
        if 'baseline' in local_var_params and local_var_params['baseline'] is not None:  # noqa: E501
            query_params.append(('baseline', local_var_params['baseline']))  # noqa: E501
        if 'qualified_name' in local_var_params and local_var_params['qualified_name'] is not None:  # noqa: E501
            query_params.append(('qualified-name', local_var_params['qualified_name']))  # noqa: E501
        if 'include_changed_code_findings' in local_var_params and local_var_params['include_changed_code_findings'] is not None:  # noqa: E501
            query_params.append(('include-changed-code-findings', local_var_params['include_changed_code_findings']))  # noqa: E501
        if 'blacklist_rationale' in local_var_params and local_var_params['blacklist_rationale'] is not None:  # noqa: E501
            query_params.append(('blacklistRationale', local_var_params['blacklist_rationale']))  # noqa: E501
        if 'sort_by' in local_var_params and local_var_params['sort_by'] is not None:  # noqa: E501
            query_params.append(('sort-by', local_var_params['sort_by']))  # noqa: E501
        if 'sort_order' in local_var_params and local_var_params['sort_order'] is not None:  # noqa: E501
            query_params.append(('sort-order', local_var_params['sort_order']))  # noqa: E501
        if 'start' in local_var_params and local_var_params['start'] is not None:  # noqa: E501
            query_params.append(('start', local_var_params['start']))  # noqa: E501
        if 'max' in local_var_params and local_var_params['max'] is not None:  # noqa: E501
            query_params.append(('max', local_var_params['max']))  # noqa: E501
        if 'all' in local_var_params and local_var_params['all'] is not None:  # noqa: E501
            query_params.append(('all', local_var_params['all']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/xml', 'application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/findings/abap', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FindingsWithCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_finding(self, project, id, **kwargs):  # noqa: E501
        """Get finding  # noqa: E501

        Retrieves a finding by its ID. This service is public API since Teamscale 5.3. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_finding(project, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str id: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TrackedFinding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_finding_with_http_info(project, id, **kwargs)  # noqa: E501

    def get_finding_with_http_info(self, project, id, **kwargs):  # noqa: E501
        """Get finding  # noqa: E501

        Retrieves a finding by its ID. This service is public API since Teamscale 5.3. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_finding_with_http_info(project, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str id: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TrackedFinding, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'id',
            't'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_finding" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `get_finding`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_finding`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `get_finding`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `get_finding`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/findings/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackedFinding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_finding_delta_badge(self, project, **kwargs):  # noqa: E501
        """Get finding delta badge  # noqa: E501

        Creates a badge for the finding delta, i.e. for the count of newly added, unmodified, and deleted findings. This service is public API since Teamscale 5.9. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_finding_delta_badge(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str t1: Range start timestamp
        :param str t2: Range end timestamp
        :param int max_milliseconds: Range duration in milliseconds
        :param str uniform_path: Uniform path to retrieve data for
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str regex: The regex filter. Filters findings by this regex. Considered Fields are Message and Location. Matches will be included in the result.
        :param bool exclude_regex: Whether regex excludes or includes findings.
        :param bool added_to_task: The added to task filter. Filter findings that already have a task assigned.
        :param list[str] filter: The finding category and group filter. Notation: category/group. The group part is optional. If a category or group is given, all matching findings will be filtered out and not included in the result.
        :param bool invert: Whether to invert the category and group filter.
        :param list[str] assessment_filters: The assessment filter. All mentioned assessment colors will be filtered out and not included in the result.
        :param str blacklisted: The blacklist filtering option.
        :param bool numeric_delta_only: Indicates whether the result should contain the actual delta findings.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_finding_delta_badge_with_http_info(project, **kwargs)  # noqa: E501

    def get_finding_delta_badge_with_http_info(self, project, **kwargs):  # noqa: E501
        """Get finding delta badge  # noqa: E501

        Creates a badge for the finding delta, i.e. for the count of newly added, unmodified, and deleted findings. This service is public API since Teamscale 5.9. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_finding_delta_badge_with_http_info(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str t1: Range start timestamp
        :param str t2: Range end timestamp
        :param int max_milliseconds: Range duration in milliseconds
        :param str uniform_path: Uniform path to retrieve data for
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str regex: The regex filter. Filters findings by this regex. Considered Fields are Message and Location. Matches will be included in the result.
        :param bool exclude_regex: Whether regex excludes or includes findings.
        :param bool added_to_task: The added to task filter. Filter findings that already have a task assigned.
        :param list[str] filter: The finding category and group filter. Notation: category/group. The group part is optional. If a category or group is given, all matching findings will be filtered out and not included in the result.
        :param bool invert: Whether to invert the category and group filter.
        :param list[str] assessment_filters: The assessment filter. All mentioned assessment colors will be filtered out and not included in the result.
        :param str blacklisted: The blacklist filtering option.
        :param bool numeric_delta_only: Indicates whether the result should contain the actual delta findings.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            't1',
            't2',
            'max_milliseconds',
            'uniform_path',
            't',
            'regex',
            'exclude_regex',
            'added_to_task',
            'filter',
            'invert',
            'assessment_filters',
            'blacklisted',
            'numeric_delta_only'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_finding_delta_badge" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `get_finding_delta_badge`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `get_finding_delta_badge`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't1' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t1']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t1` when calling `get_finding_delta_badge`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        if self.api_client.client_side_validation and 't2' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t2']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t2` when calling `get_finding_delta_badge`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `get_finding_delta_badge`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 't1' in local_var_params and local_var_params['t1'] is not None:  # noqa: E501
            query_params.append(('t1', local_var_params['t1']))  # noqa: E501
        if 't2' in local_var_params and local_var_params['t2'] is not None:  # noqa: E501
            query_params.append(('t2', local_var_params['t2']))  # noqa: E501
        if 'max_milliseconds' in local_var_params and local_var_params['max_milliseconds'] is not None:  # noqa: E501
            query_params.append(('max-milliseconds', local_var_params['max_milliseconds']))  # noqa: E501
        if 'uniform_path' in local_var_params and local_var_params['uniform_path'] is not None:  # noqa: E501
            query_params.append(('uniform-path', local_var_params['uniform_path']))  # noqa: E501
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501
        if 'regex' in local_var_params and local_var_params['regex'] is not None:  # noqa: E501
            query_params.append(('regex', local_var_params['regex']))  # noqa: E501
        if 'exclude_regex' in local_var_params and local_var_params['exclude_regex'] is not None:  # noqa: E501
            query_params.append(('exclude-regex', local_var_params['exclude_regex']))  # noqa: E501
        if 'added_to_task' in local_var_params and local_var_params['added_to_task'] is not None:  # noqa: E501
            query_params.append(('added-to-task', local_var_params['added_to_task']))  # noqa: E501
        if 'filter' in local_var_params and local_var_params['filter'] is not None:  # noqa: E501
            query_params.append(('filter', local_var_params['filter']))  # noqa: E501
            collection_formats['filter'] = 'multi'  # noqa: E501
        if 'invert' in local_var_params and local_var_params['invert'] is not None:  # noqa: E501
            query_params.append(('invert', local_var_params['invert']))  # noqa: E501
        if 'assessment_filters' in local_var_params and local_var_params['assessment_filters'] is not None:  # noqa: E501
            query_params.append(('assessment-filters', local_var_params['assessment_filters']))  # noqa: E501
            collection_formats['assessment-filters'] = 'multi'  # noqa: E501
        if 'blacklisted' in local_var_params and local_var_params['blacklisted'] is not None:  # noqa: E501
            query_params.append(('blacklisted', local_var_params['blacklisted']))  # noqa: E501
        if 'numeric_delta_only' in local_var_params and local_var_params['numeric_delta_only'] is not None:  # noqa: E501
            query_params.append(('numeric-delta-only', local_var_params['numeric_delta_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/findings/delta/badge', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_finding_with_diff_info(self, project, id, **kwargs):  # noqa: E501
        """Get finding with diff information  # noqa: E501

        Retrieves a finding by its ID with additional information on when and where the finding was introduced or removed. This service is public API since Teamscale 5.3. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_finding_with_diff_info(project, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str id: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TrackedFindingWithDiffInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_finding_with_diff_info_with_http_info(project, id, **kwargs)  # noqa: E501

    def get_finding_with_diff_info_with_http_info(self, project, id, **kwargs):  # noqa: E501
        """Get finding with diff information  # noqa: E501

        Retrieves a finding by its ID with additional information on when and where the finding was introduced or removed. This service is public API since Teamscale 5.3. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_finding_with_diff_info_with_http_info(project, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str id: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TrackedFindingWithDiffInfo, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'id',
            't'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_finding_with_diff_info" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `get_finding_with_diff_info`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_finding_with_diff_info`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `get_finding_with_diff_info`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `get_finding_with_diff_info`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/findings/{id}/with-diff-info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackedFindingWithDiffInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_findings(self, project, **kwargs):  # noqa: E501
        """Get findings  # noqa: E501

        Gets a list of all findings. Findings can be filtered by path prefix. For recursive queries, these are all findings found in the sub-tree. Filter parameters allow to only retrieve findings in a specific category and/or group. There is an upper limit for the number of returned findings. This service is public API since Teamscale 5.6. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_findings(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str uniform_path: The uniform path for which findings should be retrieved. This can be either a concrete file or a container. In the latter case the recursive parameter can be used to specify whether sub-trees should be considered.
        :param bool recursive: If this parameter is set to 'true', the query is recursive and results for all elements in the sub-tree are returned.
        :param bool pretty: If this is true, the findings are adjusted to match a pretty printed version of the code. This may not be used together with recursive queries to directories.
        :param FindingsFilterSettings t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param FindingsFilterSettings regex: The regex filter. Filters findings by this regex. Considered Fields are Message and Location. Matches will be included in the result.
        :param FindingsFilterSettings exclude_regex: Whether regex excludes or includes findings.
        :param FindingsFilterSettings added_to_task: The added to task filter. Filter findings that already have a task assigned.
        :param FindingsFilterSettings filter: The finding category and group filter. Notation: category/group. The group part is optional. If a category or group is given, all matching findings will be filtered out and not included in the result.
        :param FindingsFilterSettings invert: Whether to invert the category and group filter.
        :param FindingsFilterSettings assessment_filters: The assessment filter. All mentioned assessment colors will be filtered out and not included in the result.
        :param FindingsFilterSettings blacklisted: The blacklist filtering option.
        :param FindingsFilterSettings baseline: The baseline name or baseline timestamp, with regards to which the findings shall be filtered.
        :param FindingsFilterSettings qualified_name: If this parameter is given, general findings and such covering the specified qualified location are returned.
        :param FindingsFilterSettings include_changed_code_findings: If this is true, findings in changed code as included as well. Only used if a baseline is provided as well.
        :param FindingsFilterSettings blacklist_rationale: A pattern to be matched against the rationale for which the findings was tolerated or marked as false positive.
        :param FindingSortOptions sort_by: The finding property by which the result is sorted. If none is given the result is not sorted. One of group, location, message, or a finding property, or random
        :param FindingSortOptions sort_order: The sort order
        :param FindingsPaginationOptions start: If this parameter is given, the findings returned will start from this index (0 based), i.e. the first start findings in the list (for current sorting) will be skipped.
        :param FindingsPaginationOptions max: Limits the number of findings returned. If also the parameter 'all' is used, the limit is ignored. Providing no limit will use the default limit of 300.
        :param FindingsPaginationOptions all: If this is true, the finding list is not truncated to 300 elements.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[TrackedFinding]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_findings_with_http_info(project, **kwargs)  # noqa: E501

    def get_findings_with_http_info(self, project, **kwargs):  # noqa: E501
        """Get findings  # noqa: E501

        Gets a list of all findings. Findings can be filtered by path prefix. For recursive queries, these are all findings found in the sub-tree. Filter parameters allow to only retrieve findings in a specific category and/or group. There is an upper limit for the number of returned findings. This service is public API since Teamscale 5.6. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_findings_with_http_info(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str uniform_path: The uniform path for which findings should be retrieved. This can be either a concrete file or a container. In the latter case the recursive parameter can be used to specify whether sub-trees should be considered.
        :param bool recursive: If this parameter is set to 'true', the query is recursive and results for all elements in the sub-tree are returned.
        :param bool pretty: If this is true, the findings are adjusted to match a pretty printed version of the code. This may not be used together with recursive queries to directories.
        :param FindingsFilterSettings t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param FindingsFilterSettings regex: The regex filter. Filters findings by this regex. Considered Fields are Message and Location. Matches will be included in the result.
        :param FindingsFilterSettings exclude_regex: Whether regex excludes or includes findings.
        :param FindingsFilterSettings added_to_task: The added to task filter. Filter findings that already have a task assigned.
        :param FindingsFilterSettings filter: The finding category and group filter. Notation: category/group. The group part is optional. If a category or group is given, all matching findings will be filtered out and not included in the result.
        :param FindingsFilterSettings invert: Whether to invert the category and group filter.
        :param FindingsFilterSettings assessment_filters: The assessment filter. All mentioned assessment colors will be filtered out and not included in the result.
        :param FindingsFilterSettings blacklisted: The blacklist filtering option.
        :param FindingsFilterSettings baseline: The baseline name or baseline timestamp, with regards to which the findings shall be filtered.
        :param FindingsFilterSettings qualified_name: If this parameter is given, general findings and such covering the specified qualified location are returned.
        :param FindingsFilterSettings include_changed_code_findings: If this is true, findings in changed code as included as well. Only used if a baseline is provided as well.
        :param FindingsFilterSettings blacklist_rationale: A pattern to be matched against the rationale for which the findings was tolerated or marked as false positive.
        :param FindingSortOptions sort_by: The finding property by which the result is sorted. If none is given the result is not sorted. One of group, location, message, or a finding property, or random
        :param FindingSortOptions sort_order: The sort order
        :param FindingsPaginationOptions start: If this parameter is given, the findings returned will start from this index (0 based), i.e. the first start findings in the list (for current sorting) will be skipped.
        :param FindingsPaginationOptions max: Limits the number of findings returned. If also the parameter 'all' is used, the limit is ignored. Providing no limit will use the default limit of 300.
        :param FindingsPaginationOptions all: If this is true, the finding list is not truncated to 300 elements.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[TrackedFinding], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'uniform_path',
            'recursive',
            'pretty',
            't',
            'regex',
            'exclude_regex',
            'added_to_task',
            'filter',
            'invert',
            'assessment_filters',
            'blacklisted',
            'baseline',
            'qualified_name',
            'include_changed_code_findings',
            'blacklist_rationale',
            'sort_by',
            'sort_order',
            'start',
            'max',
            'all'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_findings" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `get_findings`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `get_findings`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 'uniform_path' in local_var_params and local_var_params['uniform_path'] is not None:  # noqa: E501
            query_params.append(('uniform-path', local_var_params['uniform_path']))  # noqa: E501
        if 'recursive' in local_var_params and local_var_params['recursive'] is not None:  # noqa: E501
            query_params.append(('recursive', local_var_params['recursive']))  # noqa: E501
        if 'pretty' in local_var_params and local_var_params['pretty'] is not None:  # noqa: E501
            query_params.append(('pretty', local_var_params['pretty']))  # noqa: E501
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501
        if 'regex' in local_var_params and local_var_params['regex'] is not None:  # noqa: E501
            query_params.append(('regex', local_var_params['regex']))  # noqa: E501
        if 'exclude_regex' in local_var_params and local_var_params['exclude_regex'] is not None:  # noqa: E501
            query_params.append(('exclude-regex', local_var_params['exclude_regex']))  # noqa: E501
        if 'added_to_task' in local_var_params and local_var_params['added_to_task'] is not None:  # noqa: E501
            query_params.append(('added-to-task', local_var_params['added_to_task']))  # noqa: E501
        if 'filter' in local_var_params and local_var_params['filter'] is not None:  # noqa: E501
            query_params.append(('filter', local_var_params['filter']))  # noqa: E501
        if 'invert' in local_var_params and local_var_params['invert'] is not None:  # noqa: E501
            query_params.append(('invert', local_var_params['invert']))  # noqa: E501
        if 'assessment_filters' in local_var_params and local_var_params['assessment_filters'] is not None:  # noqa: E501
            query_params.append(('assessment-filters', local_var_params['assessment_filters']))  # noqa: E501
        if 'blacklisted' in local_var_params and local_var_params['blacklisted'] is not None:  # noqa: E501
            query_params.append(('blacklisted', local_var_params['blacklisted']))  # noqa: E501
        if 'baseline' in local_var_params and local_var_params['baseline'] is not None:  # noqa: E501
            query_params.append(('baseline', local_var_params['baseline']))  # noqa: E501
        if 'qualified_name' in local_var_params and local_var_params['qualified_name'] is not None:  # noqa: E501
            query_params.append(('qualified-name', local_var_params['qualified_name']))  # noqa: E501
        if 'include_changed_code_findings' in local_var_params and local_var_params['include_changed_code_findings'] is not None:  # noqa: E501
            query_params.append(('include-changed-code-findings', local_var_params['include_changed_code_findings']))  # noqa: E501
        if 'blacklist_rationale' in local_var_params and local_var_params['blacklist_rationale'] is not None:  # noqa: E501
            query_params.append(('blacklistRationale', local_var_params['blacklist_rationale']))  # noqa: E501
        if 'sort_by' in local_var_params and local_var_params['sort_by'] is not None:  # noqa: E501
            query_params.append(('sort-by', local_var_params['sort_by']))  # noqa: E501
        if 'sort_order' in local_var_params and local_var_params['sort_order'] is not None:  # noqa: E501
            query_params.append(('sort-order', local_var_params['sort_order']))  # noqa: E501
        if 'start' in local_var_params and local_var_params['start'] is not None:  # noqa: E501
            query_params.append(('start', local_var_params['start']))  # noqa: E501
        if 'max' in local_var_params and local_var_params['max'] is not None:  # noqa: E501
            query_params.append(('max', local_var_params['max']))  # noqa: E501
        if 'all' in local_var_params and local_var_params['all'] is not None:  # noqa: E501
            query_params.append(('all', local_var_params['all']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/findings/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TrackedFinding]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_findings_with_ids(self, project, **kwargs):  # noqa: E501
        """Get findings with provided ids  # noqa: E501

        Gets a list of all findings with provided ids. This service is public API since Teamscale 6.0. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_findings_with_ids(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param list[str] request_body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[TrackedFinding]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_findings_with_ids_with_http_info(project, **kwargs)  # noqa: E501

    def get_findings_with_ids_with_http_info(self, project, **kwargs):  # noqa: E501
        """Get findings with provided ids  # noqa: E501

        Gets a list of all findings with provided ids. This service is public API since Teamscale 6.0. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_findings_with_ids_with_http_info(project, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param list[str] request_body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[TrackedFinding], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            't',
            'request_body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_findings_with_ids" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `get_findings_with_ids`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `get_findings_with_ids`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `get_findings_with_ids`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/findings/list/with-ids', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TrackedFinding]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_issue_finding_badge(self, project, issue_id, **kwargs):  # noqa: E501
        """Get issue finding badge  # noqa: E501

        Creates a finding badge for the given issue. This service is public API since Teamscale 5.9. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_issue_finding_badge(project, issue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str issue_id: ID of the issue to create a finding badge for (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_issue_finding_badge_with_http_info(project, issue_id, **kwargs)  # noqa: E501

    def get_issue_finding_badge_with_http_info(self, project, issue_id, **kwargs):  # noqa: E501
        """Get issue finding badge  # noqa: E501

        Creates a finding badge for the given issue. This service is public API since Teamscale 5.9. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_issue_finding_badge_with_http_info(project, issue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str issue_id: ID of the issue to create a finding badge for (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'issue_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_issue_finding_badge" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `get_issue_finding_badge`")  # noqa: E501
        # verify the required parameter 'issue_id' is set
        if self.api_client.client_side_validation and ('issue_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['issue_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `issue_id` when calling `get_issue_finding_badge`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `get_issue_finding_badge`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501
        if 'issue_id' in local_var_params:
            path_params['issueId'] = local_var_params['issue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/issues/{issueId}/findings-badge', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_issue_finding_churn(self, project, issue_id, **kwargs):  # noqa: E501
        """Get issue finding churn  # noqa: E501

        Determines an aggregated finding churn across all commits of the issue. This service is public API since Teamscale 5.9. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_issue_finding_churn(project, issue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str issue_id: ID of the issue to determine the finding churn for (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FindingChurnList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_issue_finding_churn_with_http_info(project, issue_id, **kwargs)  # noqa: E501

    def get_issue_finding_churn_with_http_info(self, project, issue_id, **kwargs):  # noqa: E501
        """Get issue finding churn  # noqa: E501

        Determines an aggregated finding churn across all commits of the issue. This service is public API since Teamscale 5.9. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_issue_finding_churn_with_http_info(project, issue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str issue_id: ID of the issue to determine the finding churn for (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FindingChurnList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'issue_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_issue_finding_churn" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `get_issue_finding_churn`")  # noqa: E501
        # verify the required parameter 'issue_id' is set
        if self.api_client.client_side_validation and ('issue_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['issue_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `issue_id` when calling `get_issue_finding_churn`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `get_issue_finding_churn`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501
        if 'issue_id' in local_var_params:
            path_params['issueId'] = local_var_params['issue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/issues/{issueId}/finding-churn', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FindingChurnList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_findings_false_positive(self, project, operation, finding_blacklist_request_body, **kwargs):  # noqa: E501
        """Mark/unmark false positive findings.  # noqa: E501

        Marks/unmarks the given findings as false positive. This service is public API since Teamscale 5.7. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_findings_false_positive(project, operation, finding_blacklist_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str operation: Request operation to perform (e.g. add or remove blacklisting information). (required)
        :param FindingBlacklistRequestBody finding_blacklist_request_body: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.mark_findings_false_positive_with_http_info(project, operation, finding_blacklist_request_body, **kwargs)  # noqa: E501

    def mark_findings_false_positive_with_http_info(self, project, operation, finding_blacklist_request_body, **kwargs):  # noqa: E501
        """Mark/unmark false positive findings.  # noqa: E501

        Marks/unmarks the given findings as false positive. This service is public API since Teamscale 5.7. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_findings_false_positive_with_http_info(project, operation, finding_blacklist_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str operation: Request operation to perform (e.g. add or remove blacklisting information). (required)
        :param FindingBlacklistRequestBody finding_blacklist_request_body: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'operation',
            'finding_blacklist_request_body',
            't'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_findings_false_positive" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `mark_findings_false_positive`")  # noqa: E501
        # verify the required parameter 'operation' is set
        if self.api_client.client_side_validation and ('operation' not in local_var_params or  # noqa: E501
                                                        local_var_params['operation'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `operation` when calling `mark_findings_false_positive`")  # noqa: E501
        # verify the required parameter 'finding_blacklist_request_body' is set
        if self.api_client.client_side_validation and ('finding_blacklist_request_body' not in local_var_params or  # noqa: E501
                                                        local_var_params['finding_blacklist_request_body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `finding_blacklist_request_body` when calling `mark_findings_false_positive`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `mark_findings_false_positive`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `mark_findings_false_positive`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501
        if 'operation' in local_var_params and local_var_params['operation'] is not None:  # noqa: E501
            query_params.append(('operation', local_var_params['operation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'finding_blacklist_request_body' in local_var_params:
            body_params = local_var_params['finding_blacklist_request_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/findings/false-positive', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_findings_tolerated(self, project, operation, finding_blacklist_request_body, **kwargs):  # noqa: E501
        """Mark/unmark tolerated findings.  # noqa: E501

        Marks/unmarks the given findings as tolerated. This service is public API since Teamscale 5.7. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_findings_tolerated(project, operation, finding_blacklist_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str operation: Request operation to perform (e.g. add or remove blacklisting information). (required)
        :param FindingBlacklistRequestBody finding_blacklist_request_body: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.mark_findings_tolerated_with_http_info(project, operation, finding_blacklist_request_body, **kwargs)  # noqa: E501

    def mark_findings_tolerated_with_http_info(self, project, operation, finding_blacklist_request_body, **kwargs):  # noqa: E501
        """Mark/unmark tolerated findings.  # noqa: E501

        Marks/unmarks the given findings as tolerated. This service is public API since Teamscale 5.7. The API requires the user to have View Project permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_findings_tolerated_with_http_info(project, operation, finding_blacklist_request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str operation: Request operation to perform (e.g. add or remove blacklisting information). (required)
        :param FindingBlacklistRequestBody finding_blacklist_request_body: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'operation',
            'finding_blacklist_request_body',
            't'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_findings_tolerated" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `mark_findings_tolerated`")  # noqa: E501
        # verify the required parameter 'operation' is set
        if self.api_client.client_side_validation and ('operation' not in local_var_params or  # noqa: E501
                                                        local_var_params['operation'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `operation` when calling `mark_findings_tolerated`")  # noqa: E501
        # verify the required parameter 'finding_blacklist_request_body' is set
        if self.api_client.client_side_validation and ('finding_blacklist_request_body' not in local_var_params or  # noqa: E501
                                                        local_var_params['finding_blacklist_request_body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `finding_blacklist_request_body` when calling `mark_findings_tolerated`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `mark_findings_tolerated`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `mark_findings_tolerated`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501

        query_params = []
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501
        if 'operation' in local_var_params and local_var_params['operation'] is not None:  # noqa: E501
            query_params.append(('operation', local_var_params['operation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'finding_blacklist_request_body' in local_var_params:
            body_params = local_var_params['finding_blacklist_request_body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/findings/tolerated', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_external_findings(self, project, session_id, external_finding_file_data, **kwargs):  # noqa: E501
        """Upload external findings  # noqa: E501

        Adds external findings to the session. For performance reasons, it is recommended to batch calls to this service, i.e. not commit all files using single calls. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_external_findings(project, session_id, external_finding_file_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str session_id: If session ID is provided, the results will be appended to the given session instead of creating a new session. Use \"auto-create\" in place of session ID to create a new session, perform upload and commit session in one step. (required)
        :param list[ExternalFindingFileData] external_finding_file_data: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str revision: This parameter allows to pass a revision instead of a timestamp.
        :param str repository: This parameter allows to pass a repository name
        :param str message: A message that describes the external analysis, similar to a commit message.
        :param str partition: The name of the logical partition to store the results into. All existing data in this partition will be invalidated. A partition typically corresponds to one analysis run, i.e. if there are two independent builds/runs, they must use different partitions.
        :param bool movetolastcommit: Whether to move the upload timestamp to right after the last commit.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.upload_external_findings_with_http_info(project, session_id, external_finding_file_data, **kwargs)  # noqa: E501

    def upload_external_findings_with_http_info(self, project, session_id, external_finding_file_data, **kwargs):  # noqa: E501
        """Upload external findings  # noqa: E501

        Adds external findings to the session. For performance reasons, it is recommended to batch calls to this service, i.e. not commit all files using single calls. This service is public API since Teamscale 5.9. The API requires the user to have Perform External Uploads permissions on the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_external_findings_with_http_info(project, session_id, external_finding_file_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str project: The project alias or id. (required)
        :param str session_id: If session ID is provided, the results will be appended to the given session instead of creating a new session. Use \"auto-create\" in place of session ID to create a new session, perform upload and commit session in one step. (required)
        :param list[ExternalFindingFileData] external_finding_file_data: (required)
        :param str t: This parameter can be used to pass a timestamp giving the time (in milliseconds since 1970) for which the data should be provided. This can optionally be prefixed by the name of the branch, followed by a colon.
        :param str revision: This parameter allows to pass a revision instead of a timestamp.
        :param str repository: This parameter allows to pass a repository name
        :param str message: A message that describes the external analysis, similar to a commit message.
        :param str partition: The name of the logical partition to store the results into. All existing data in this partition will be invalidated. A partition typically corresponds to one analysis run, i.e. if there are two independent builds/runs, they must use different partitions.
        :param bool movetolastcommit: Whether to move the upload timestamp to right after the last commit.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'project',
            'session_id',
            'external_finding_file_data',
            't',
            'revision',
            'repository',
            'message',
            'partition',
            'movetolastcommit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_external_findings" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'project' is set
        if self.api_client.client_side_validation and ('project' not in local_var_params or  # noqa: E501
                                                        local_var_params['project'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `project` when calling `upload_external_findings`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if self.api_client.client_side_validation and ('session_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_id` when calling `upload_external_findings`")  # noqa: E501
        # verify the required parameter 'external_finding_file_data' is set
        if self.api_client.client_side_validation and ('external_finding_file_data' not in local_var_params or  # noqa: E501
                                                        local_var_params['external_finding_file_data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `external_finding_file_data` when calling `upload_external_findings`")  # noqa: E501

        if self.api_client.client_side_validation and 'project' in local_var_params and not re.search(r'^(?!aliases$)[-_.a-zA-Z0-9]+$', local_var_params['project']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `project` when calling `upload_external_findings`, must conform to the pattern `/^(?!aliases$)[-_.a-zA-Z0-9]+$/`")  # noqa: E501
        if self.api_client.client_side_validation and 't' in local_var_params and not re.search(r'(?:(.+):)?(HEAD|\d+)(?:p(\d+))?', local_var_params['t']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `t` when calling `upload_external_findings`, must conform to the pattern `/(?:(.+):)?(HEAD|\d+)(?:p(\d+))?/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'project' in local_var_params:
            path_params['project'] = local_var_params['project']  # noqa: E501
        if 'session_id' in local_var_params:
            path_params['sessionId'] = local_var_params['session_id']  # noqa: E501

        query_params = []
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501
        if 'revision' in local_var_params and local_var_params['revision'] is not None:  # noqa: E501
            query_params.append(('revision', local_var_params['revision']))  # noqa: E501
        if 'repository' in local_var_params and local_var_params['repository'] is not None:  # noqa: E501
            query_params.append(('repository', local_var_params['repository']))  # noqa: E501
        if 'message' in local_var_params and local_var_params['message'] is not None:  # noqa: E501
            query_params.append(('message', local_var_params['message']))  # noqa: E501
        if 'partition' in local_var_params and local_var_params['partition'] is not None:  # noqa: E501
            query_params.append(('partition', local_var_params['partition']))  # noqa: E501
        if 'movetolastcommit' in local_var_params and local_var_params['movetolastcommit'] is not None:  # noqa: E501
            query_params.append(('movetolastcommit', local_var_params['movetolastcommit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'external_finding_file_data' in local_var_params:
            body_params = local_var_params['external_finding_file_data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{project}/external-analysis/session/{sessionId}/external-findings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
