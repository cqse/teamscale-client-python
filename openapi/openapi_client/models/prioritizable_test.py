# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PrioritizableTest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uniform_path': 'str',
        'selection_reason': 'str',
        'partition': 'str',
        'duration_in_ms': 'int',
        'current_score': 'float'
    }

    attribute_map = {
        'uniform_path': 'uniformPath',
        'selection_reason': 'selectionReason',
        'partition': 'partition',
        'duration_in_ms': 'durationInMs',
        'current_score': 'currentScore'
    }

    def __init__(self, uniform_path=None, selection_reason=None, partition=None, duration_in_ms=None, current_score=None, local_vars_configuration=None):  # noqa: E501
        """PrioritizableTest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uniform_path = None
        self._selection_reason = None
        self._partition = None
        self._duration_in_ms = None
        self._current_score = None
        self.discriminator = None

        if uniform_path is not None:
            self.uniform_path = uniform_path
        if selection_reason is not None:
            self.selection_reason = selection_reason
        if partition is not None:
            self.partition = partition
        if duration_in_ms is not None:
            self.duration_in_ms = duration_in_ms
        if current_score is not None:
            self.current_score = current_score

    @property
    def uniform_path(self):
        """Gets the uniform_path of this PrioritizableTest.  # noqa: E501


        :return: The uniform_path of this PrioritizableTest.  # noqa: E501
        :rtype: str
        """
        return self._uniform_path

    @uniform_path.setter
    def uniform_path(self, uniform_path):
        """Sets the uniform_path of this PrioritizableTest.


        :param uniform_path: The uniform_path of this PrioritizableTest.  # noqa: E501
        :type: str
        """

        self._uniform_path = uniform_path

    @property
    def selection_reason(self):
        """Gets the selection_reason of this PrioritizableTest.  # noqa: E501


        :return: The selection_reason of this PrioritizableTest.  # noqa: E501
        :rtype: str
        """
        return self._selection_reason

    @selection_reason.setter
    def selection_reason(self, selection_reason):
        """Sets the selection_reason of this PrioritizableTest.


        :param selection_reason: The selection_reason of this PrioritizableTest.  # noqa: E501
        :type: str
        """
        allowed_values = ["COVERS_CHANGES", "COVERS_DELETED", "ADDED_OR_MODIFIED_TEST", "PREVIOUSLY_FAILED", "PREVIOUSLY_SKIPPED", "COVERS_OTHER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and selection_reason not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `selection_reason` ({0}), must be one of {1}"  # noqa: E501
                .format(selection_reason, allowed_values)
            )

        self._selection_reason = selection_reason

    @property
    def partition(self):
        """Gets the partition of this PrioritizableTest.  # noqa: E501


        :return: The partition of this PrioritizableTest.  # noqa: E501
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this PrioritizableTest.


        :param partition: The partition of this PrioritizableTest.  # noqa: E501
        :type: str
        """

        self._partition = partition

    @property
    def duration_in_ms(self):
        """Gets the duration_in_ms of this PrioritizableTest.  # noqa: E501


        :return: The duration_in_ms of this PrioritizableTest.  # noqa: E501
        :rtype: int
        """
        return self._duration_in_ms

    @duration_in_ms.setter
    def duration_in_ms(self, duration_in_ms):
        """Sets the duration_in_ms of this PrioritizableTest.


        :param duration_in_ms: The duration_in_ms of this PrioritizableTest.  # noqa: E501
        :type: int
        """

        self._duration_in_ms = duration_in_ms

    @property
    def current_score(self):
        """Gets the current_score of this PrioritizableTest.  # noqa: E501


        :return: The current_score of this PrioritizableTest.  # noqa: E501
        :rtype: float
        """
        return self._current_score

    @current_score.setter
    def current_score(self, current_score):
        """Sets the current_score of this PrioritizableTest.


        :param current_score: The current_score of this PrioritizableTest.  # noqa: E501
        :type: float
        """

        self._current_score = current_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrioritizableTest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PrioritizableTest):
            return True

        return self.to_dict() != other.to_dict()
