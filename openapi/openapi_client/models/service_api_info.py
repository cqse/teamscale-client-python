# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ServiceApiInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'max_api_version': 'Version',
        'min_api_version': 'Version',
        'admin_contact': 'str'
    }

    attribute_map = {
        'max_api_version': 'maxApiVersion',
        'min_api_version': 'minApiVersion',
        'admin_contact': 'adminContact'
    }

    def __init__(self, max_api_version=None, min_api_version=None, admin_contact=None, local_vars_configuration=None):  # noqa: E501
        """ServiceApiInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._max_api_version = None
        self._min_api_version = None
        self._admin_contact = None
        self.discriminator = None

        if max_api_version is not None:
            self.max_api_version = max_api_version
        if min_api_version is not None:
            self.min_api_version = min_api_version
        if admin_contact is not None:
            self.admin_contact = admin_contact

    @property
    def max_api_version(self):
        """Gets the max_api_version of this ServiceApiInfo.  # noqa: E501


        :return: The max_api_version of this ServiceApiInfo.  # noqa: E501
        :rtype: Version
        """
        return self._max_api_version

    @max_api_version.setter
    def max_api_version(self, max_api_version):
        """Sets the max_api_version of this ServiceApiInfo.


        :param max_api_version: The max_api_version of this ServiceApiInfo.  # noqa: E501
        :type: Version
        """

        self._max_api_version = max_api_version

    @property
    def min_api_version(self):
        """Gets the min_api_version of this ServiceApiInfo.  # noqa: E501


        :return: The min_api_version of this ServiceApiInfo.  # noqa: E501
        :rtype: Version
        """
        return self._min_api_version

    @min_api_version.setter
    def min_api_version(self, min_api_version):
        """Sets the min_api_version of this ServiceApiInfo.


        :param min_api_version: The min_api_version of this ServiceApiInfo.  # noqa: E501
        :type: Version
        """

        self._min_api_version = min_api_version

    @property
    def admin_contact(self):
        """Gets the admin_contact of this ServiceApiInfo.  # noqa: E501


        :return: The admin_contact of this ServiceApiInfo.  # noqa: E501
        :rtype: str
        """
        return self._admin_contact

    @admin_contact.setter
    def admin_contact(self, admin_contact):
        """Sets the admin_contact of this ServiceApiInfo.


        :param admin_contact: The admin_contact of this ServiceApiInfo.  # noqa: E501
        :type: str
        """

        self._admin_contact = admin_contact

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceApiInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceApiInfo):
            return True

        return self.to_dict() != other.to_dict()
