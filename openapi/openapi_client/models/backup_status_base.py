# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BackupStatusBase(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'str',
        'status_message': 'str',
        'logs': 'list[LoggingEventTransport]',
        'start_date': 'datetime'
    }

    attribute_map = {
        'status': 'status',
        'status_message': 'statusMessage',
        'logs': 'logs',
        'start_date': 'startDate'
    }

    def __init__(self, status=None, status_message=None, logs=None, start_date=None, local_vars_configuration=None):  # noqa: E501
        """BackupStatusBase - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._status = None
        self._status_message = None
        self._logs = None
        self._start_date = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if status_message is not None:
            self.status_message = status_message
        if logs is not None:
            self.logs = logs
        if start_date is not None:
            self.start_date = start_date

    @property
    def status(self):
        """Gets the status of this BackupStatusBase.  # noqa: E501


        :return: The status of this BackupStatusBase.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BackupStatusBase.


        :param status: The status of this BackupStatusBase.  # noqa: E501
        :type: str
        """
        allowed_values = ["IN_PROGRESS", "SUCCESS", "FAILURE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this BackupStatusBase.  # noqa: E501


        :return: The status_message of this BackupStatusBase.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this BackupStatusBase.


        :param status_message: The status_message of this BackupStatusBase.  # noqa: E501
        :type: str
        """

        self._status_message = status_message

    @property
    def logs(self):
        """Gets the logs of this BackupStatusBase.  # noqa: E501


        :return: The logs of this BackupStatusBase.  # noqa: E501
        :rtype: list[LoggingEventTransport]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this BackupStatusBase.


        :param logs: The logs of this BackupStatusBase.  # noqa: E501
        :type: list[LoggingEventTransport]
        """

        self._logs = logs

    @property
    def start_date(self):
        """Gets the start_date of this BackupStatusBase.  # noqa: E501


        :return: The start_date of this BackupStatusBase.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this BackupStatusBase.


        :param start_date: The start_date of this BackupStatusBase.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupStatusBase):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BackupStatusBase):
            return True

        return self.to_dict() != other.to_dict()
