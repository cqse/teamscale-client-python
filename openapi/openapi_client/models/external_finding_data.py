# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ExternalFindingData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'finding_type_id': 'str',
        'message': 'str',
        'assessment': 'str',
        'start_offset': 'int',
        'end_offset': 'int',
        'start_line': 'int',
        'end_line': 'int',
        'identifier': 'str',
        'finding_properties': 'dict(str, object)'
    }

    attribute_map = {
        'finding_type_id': 'findingTypeId',
        'message': 'message',
        'assessment': 'assessment',
        'start_offset': 'startOffset',
        'end_offset': 'endOffset',
        'start_line': 'startLine',
        'end_line': 'endLine',
        'identifier': 'identifier',
        'finding_properties': 'findingProperties'
    }

    def __init__(self, finding_type_id=None, message=None, assessment=None, start_offset=None, end_offset=None, start_line=None, end_line=None, identifier=None, finding_properties=None, local_vars_configuration=None):  # noqa: E501
        """ExternalFindingData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._finding_type_id = None
        self._message = None
        self._assessment = None
        self._start_offset = None
        self._end_offset = None
        self._start_line = None
        self._end_line = None
        self._identifier = None
        self._finding_properties = None
        self.discriminator = None

        if finding_type_id is not None:
            self.finding_type_id = finding_type_id
        if message is not None:
            self.message = message
        if assessment is not None:
            self.assessment = assessment
        if start_offset is not None:
            self.start_offset = start_offset
        if end_offset is not None:
            self.end_offset = end_offset
        if start_line is not None:
            self.start_line = start_line
        if end_line is not None:
            self.end_line = end_line
        if identifier is not None:
            self.identifier = identifier
        if finding_properties is not None:
            self.finding_properties = finding_properties

    @property
    def finding_type_id(self):
        """Gets the finding_type_id of this ExternalFindingData.  # noqa: E501


        :return: The finding_type_id of this ExternalFindingData.  # noqa: E501
        :rtype: str
        """
        return self._finding_type_id

    @finding_type_id.setter
    def finding_type_id(self, finding_type_id):
        """Sets the finding_type_id of this ExternalFindingData.


        :param finding_type_id: The finding_type_id of this ExternalFindingData.  # noqa: E501
        :type: str
        """

        self._finding_type_id = finding_type_id

    @property
    def message(self):
        """Gets the message of this ExternalFindingData.  # noqa: E501


        :return: The message of this ExternalFindingData.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ExternalFindingData.


        :param message: The message of this ExternalFindingData.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def assessment(self):
        """Gets the assessment of this ExternalFindingData.  # noqa: E501


        :return: The assessment of this ExternalFindingData.  # noqa: E501
        :rtype: str
        """
        return self._assessment

    @assessment.setter
    def assessment(self, assessment):
        """Sets the assessment of this ExternalFindingData.


        :param assessment: The assessment of this ExternalFindingData.  # noqa: E501
        :type: str
        """
        allowed_values = ["RED", "ORANGE", "YELLOW", "GREEN", "BASELINE", "UNKNOWN"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and assessment not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `assessment` ({0}), must be one of {1}"  # noqa: E501
                .format(assessment, allowed_values)
            )

        self._assessment = assessment

    @property
    def start_offset(self):
        """Gets the start_offset of this ExternalFindingData.  # noqa: E501


        :return: The start_offset of this ExternalFindingData.  # noqa: E501
        :rtype: int
        """
        return self._start_offset

    @start_offset.setter
    def start_offset(self, start_offset):
        """Sets the start_offset of this ExternalFindingData.


        :param start_offset: The start_offset of this ExternalFindingData.  # noqa: E501
        :type: int
        """

        self._start_offset = start_offset

    @property
    def end_offset(self):
        """Gets the end_offset of this ExternalFindingData.  # noqa: E501


        :return: The end_offset of this ExternalFindingData.  # noqa: E501
        :rtype: int
        """
        return self._end_offset

    @end_offset.setter
    def end_offset(self, end_offset):
        """Sets the end_offset of this ExternalFindingData.


        :param end_offset: The end_offset of this ExternalFindingData.  # noqa: E501
        :type: int
        """

        self._end_offset = end_offset

    @property
    def start_line(self):
        """Gets the start_line of this ExternalFindingData.  # noqa: E501


        :return: The start_line of this ExternalFindingData.  # noqa: E501
        :rtype: int
        """
        return self._start_line

    @start_line.setter
    def start_line(self, start_line):
        """Sets the start_line of this ExternalFindingData.


        :param start_line: The start_line of this ExternalFindingData.  # noqa: E501
        :type: int
        """

        self._start_line = start_line

    @property
    def end_line(self):
        """Gets the end_line of this ExternalFindingData.  # noqa: E501


        :return: The end_line of this ExternalFindingData.  # noqa: E501
        :rtype: int
        """
        return self._end_line

    @end_line.setter
    def end_line(self, end_line):
        """Sets the end_line of this ExternalFindingData.


        :param end_line: The end_line of this ExternalFindingData.  # noqa: E501
        :type: int
        """

        self._end_line = end_line

    @property
    def identifier(self):
        """Gets the identifier of this ExternalFindingData.  # noqa: E501


        :return: The identifier of this ExternalFindingData.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this ExternalFindingData.


        :param identifier: The identifier of this ExternalFindingData.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def finding_properties(self):
        """Gets the finding_properties of this ExternalFindingData.  # noqa: E501


        :return: The finding_properties of this ExternalFindingData.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._finding_properties

    @finding_properties.setter
    def finding_properties(self, finding_properties):
        """Sets the finding_properties of this ExternalFindingData.


        :param finding_properties: The finding_properties of this ExternalFindingData.  # noqa: E501
        :type: dict(str, object)
        """

        self._finding_properties = finding_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalFindingData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExternalFindingData):
            return True

        return self.to_dict() != other.to_dict()
