# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineObject2(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'all_partitions': 'bool',
        'partitions': 'list[str]',
        'cross_annotation_projects': 'list[str]',
        'execution_only': 'bool',
        'churn': 'bool'
    }

    attribute_map = {
        'all_partitions': 'all-partitions',
        'partitions': 'partitions',
        'cross_annotation_projects': 'cross-annotation-projects',
        'execution_only': 'execution-only',
        'churn': 'churn'
    }

    def __init__(self, all_partitions=False, partitions=None, cross_annotation_projects=None, execution_only=None, churn=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject2 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._all_partitions = None
        self._partitions = None
        self._cross_annotation_projects = None
        self._execution_only = None
        self._churn = None
        self.discriminator = None

        if all_partitions is not None:
            self.all_partitions = all_partitions
        if partitions is not None:
            self.partitions = partitions
        if cross_annotation_projects is not None:
            self.cross_annotation_projects = cross_annotation_projects
        if execution_only is not None:
            self.execution_only = execution_only
        if churn is not None:
            self.churn = churn

    @property
    def all_partitions(self):
        """Gets the all_partitions of this InlineObject2.  # noqa: E501


        :return: The all_partitions of this InlineObject2.  # noqa: E501
        :rtype: bool
        """
        return self._all_partitions

    @all_partitions.setter
    def all_partitions(self, all_partitions):
        """Sets the all_partitions of this InlineObject2.


        :param all_partitions: The all_partitions of this InlineObject2.  # noqa: E501
        :type: bool
        """

        self._all_partitions = all_partitions

    @property
    def partitions(self):
        """Gets the partitions of this InlineObject2.  # noqa: E501


        :return: The partitions of this InlineObject2.  # noqa: E501
        :rtype: list[str]
        """
        return self._partitions

    @partitions.setter
    def partitions(self, partitions):
        """Sets the partitions of this InlineObject2.


        :param partitions: The partitions of this InlineObject2.  # noqa: E501
        :type: list[str]
        """

        self._partitions = partitions

    @property
    def cross_annotation_projects(self):
        """Gets the cross_annotation_projects of this InlineObject2.  # noqa: E501


        :return: The cross_annotation_projects of this InlineObject2.  # noqa: E501
        :rtype: list[str]
        """
        return self._cross_annotation_projects

    @cross_annotation_projects.setter
    def cross_annotation_projects(self, cross_annotation_projects):
        """Sets the cross_annotation_projects of this InlineObject2.


        :param cross_annotation_projects: The cross_annotation_projects of this InlineObject2.  # noqa: E501
        :type: list[str]
        """

        self._cross_annotation_projects = cross_annotation_projects

    @property
    def execution_only(self):
        """Gets the execution_only of this InlineObject2.  # noqa: E501


        :return: The execution_only of this InlineObject2.  # noqa: E501
        :rtype: bool
        """
        return self._execution_only

    @execution_only.setter
    def execution_only(self, execution_only):
        """Sets the execution_only of this InlineObject2.


        :param execution_only: The execution_only of this InlineObject2.  # noqa: E501
        :type: bool
        """

        self._execution_only = execution_only

    @property
    def churn(self):
        """Gets the churn of this InlineObject2.  # noqa: E501


        :return: The churn of this InlineObject2.  # noqa: E501
        :rtype: bool
        """
        return self._churn

    @churn.setter
    def churn(self, churn):
        """Sets the churn of this InlineObject2.


        :param churn: The churn of this InlineObject2.  # noqa: E501
        :type: bool
        """

        self._churn = churn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject2):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject2):
            return True

        return self.to_dict() != other.to_dict()
