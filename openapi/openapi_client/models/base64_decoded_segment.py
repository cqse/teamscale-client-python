# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Base64DecodedSegment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'generated_column_offset': 'int',
        'original_file_index': 'int',
        'original_line_number': 'int',
        'original_column_offset': 'int'
    }

    attribute_map = {
        'generated_column_offset': 'generatedColumnOffset',
        'original_file_index': 'originalFileIndex',
        'original_line_number': 'originalLineNumber',
        'original_column_offset': 'originalColumnOffset'
    }

    def __init__(self, generated_column_offset=None, original_file_index=None, original_line_number=None, original_column_offset=None, local_vars_configuration=None):  # noqa: E501
        """Base64DecodedSegment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._generated_column_offset = None
        self._original_file_index = None
        self._original_line_number = None
        self._original_column_offset = None
        self.discriminator = None

        if generated_column_offset is not None:
            self.generated_column_offset = generated_column_offset
        if original_file_index is not None:
            self.original_file_index = original_file_index
        if original_line_number is not None:
            self.original_line_number = original_line_number
        if original_column_offset is not None:
            self.original_column_offset = original_column_offset

    @property
    def generated_column_offset(self):
        """Gets the generated_column_offset of this Base64DecodedSegment.  # noqa: E501


        :return: The generated_column_offset of this Base64DecodedSegment.  # noqa: E501
        :rtype: int
        """
        return self._generated_column_offset

    @generated_column_offset.setter
    def generated_column_offset(self, generated_column_offset):
        """Sets the generated_column_offset of this Base64DecodedSegment.


        :param generated_column_offset: The generated_column_offset of this Base64DecodedSegment.  # noqa: E501
        :type: int
        """

        self._generated_column_offset = generated_column_offset

    @property
    def original_file_index(self):
        """Gets the original_file_index of this Base64DecodedSegment.  # noqa: E501


        :return: The original_file_index of this Base64DecodedSegment.  # noqa: E501
        :rtype: int
        """
        return self._original_file_index

    @original_file_index.setter
    def original_file_index(self, original_file_index):
        """Sets the original_file_index of this Base64DecodedSegment.


        :param original_file_index: The original_file_index of this Base64DecodedSegment.  # noqa: E501
        :type: int
        """

        self._original_file_index = original_file_index

    @property
    def original_line_number(self):
        """Gets the original_line_number of this Base64DecodedSegment.  # noqa: E501


        :return: The original_line_number of this Base64DecodedSegment.  # noqa: E501
        :rtype: int
        """
        return self._original_line_number

    @original_line_number.setter
    def original_line_number(self, original_line_number):
        """Sets the original_line_number of this Base64DecodedSegment.


        :param original_line_number: The original_line_number of this Base64DecodedSegment.  # noqa: E501
        :type: int
        """

        self._original_line_number = original_line_number

    @property
    def original_column_offset(self):
        """Gets the original_column_offset of this Base64DecodedSegment.  # noqa: E501


        :return: The original_column_offset of this Base64DecodedSegment.  # noqa: E501
        :rtype: int
        """
        return self._original_column_offset

    @original_column_offset.setter
    def original_column_offset(self, original_column_offset):
        """Sets the original_column_offset of this Base64DecodedSegment.


        :param original_column_offset: The original_column_offset of this Base64DecodedSegment.  # noqa: E501
        :type: int
        """

        self._original_column_offset = original_column_offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Base64DecodedSegment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Base64DecodedSegment):
            return True

        return self.to_dict() != other.to_dict()
