# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BackupJobSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'key': 'str',
        'start_timestamp': 'int',
        'status': 'str'
    }

    attribute_map = {
        'key': 'key',
        'start_timestamp': 'startTimestamp',
        'status': 'status'
    }

    def __init__(self, key=None, start_timestamp=None, status=None, local_vars_configuration=None):  # noqa: E501
        """BackupJobSummary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._key = None
        self._start_timestamp = None
        self._status = None
        self.discriminator = None

        if key is not None:
            self.key = key
        if start_timestamp is not None:
            self.start_timestamp = start_timestamp
        if status is not None:
            self.status = status

    @property
    def key(self):
        """Gets the key of this BackupJobSummary.  # noqa: E501


        :return: The key of this BackupJobSummary.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this BackupJobSummary.


        :param key: The key of this BackupJobSummary.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this BackupJobSummary.  # noqa: E501


        :return: The start_timestamp of this BackupJobSummary.  # noqa: E501
        :rtype: int
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this BackupJobSummary.


        :param start_timestamp: The start_timestamp of this BackupJobSummary.  # noqa: E501
        :type: int
        """

        self._start_timestamp = start_timestamp

    @property
    def status(self):
        """Gets the status of this BackupJobSummary.  # noqa: E501


        :return: The status of this BackupJobSummary.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BackupJobSummary.


        :param status: The status of this BackupJobSummary.  # noqa: E501
        :type: str
        """
        allowed_values = ["IN_PROGRESS", "SUCCESS", "FAILURE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupJobSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BackupJobSummary):
            return True

        return self.to_dict() != other.to_dict()
