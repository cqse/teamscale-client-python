# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class InlineObject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'backup_global': 'bool',
        'include_project': 'list[str]',
        'use_local_crypto_key': 'bool',
        'backup_path': 'str'
    }

    attribute_map = {
        'backup_global': 'backup-global',
        'include_project': 'include-project',
        'use_local_crypto_key': 'use-local-crypto-key',
        'backup_path': 'backup-path'
    }

    def __init__(self, backup_global=None, include_project=None, use_local_crypto_key=None, backup_path=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._backup_global = None
        self._include_project = None
        self._use_local_crypto_key = None
        self._backup_path = None
        self.discriminator = None

        if backup_global is not None:
            self.backup_global = backup_global
        if include_project is not None:
            self.include_project = include_project
        if use_local_crypto_key is not None:
            self.use_local_crypto_key = use_local_crypto_key
        if backup_path is not None:
            self.backup_path = backup_path

    @property
    def backup_global(self):
        """Gets the backup_global of this InlineObject.  # noqa: E501

        Include global data in the backup.  # noqa: E501

        :return: The backup_global of this InlineObject.  # noqa: E501
        :rtype: bool
        """
        return self._backup_global

    @backup_global.setter
    def backup_global(self, backup_global):
        """Sets the backup_global of this InlineObject.

        Include global data in the backup.  # noqa: E501

        :param backup_global: The backup_global of this InlineObject.  # noqa: E501
        :type: bool
        """

        self._backup_global = backup_global

    @property
    def include_project(self):
        """Gets the include_project of this InlineObject.  # noqa: E501

        Include project data in the backup. May be present multiple times.  # noqa: E501

        :return: The include_project of this InlineObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._include_project

    @include_project.setter
    def include_project(self, include_project):
        """Sets the include_project of this InlineObject.

        Include project data in the backup. May be present multiple times.  # noqa: E501

        :param include_project: The include_project of this InlineObject.  # noqa: E501
        :type: list[str]
        """

        self._include_project = include_project

    @property
    def use_local_crypto_key(self):
        """Gets the use_local_crypto_key of this InlineObject.  # noqa: E501

        Use the local key (if configured) instead of Teamscale default key for encryption.  # noqa: E501

        :return: The use_local_crypto_key of this InlineObject.  # noqa: E501
        :rtype: bool
        """
        return self._use_local_crypto_key

    @use_local_crypto_key.setter
    def use_local_crypto_key(self, use_local_crypto_key):
        """Sets the use_local_crypto_key of this InlineObject.

        Use the local key (if configured) instead of Teamscale default key for encryption.  # noqa: E501

        :param use_local_crypto_key: The use_local_crypto_key of this InlineObject.  # noqa: E501
        :type: bool
        """

        self._use_local_crypto_key = use_local_crypto_key

    @property
    def backup_path(self):
        """Gets the backup_path of this InlineObject.  # noqa: E501

        The backup path. If this is not set, a new internal path will be generated.  # noqa: E501

        :return: The backup_path of this InlineObject.  # noqa: E501
        :rtype: str
        """
        return self._backup_path

    @backup_path.setter
    def backup_path(self, backup_path):
        """Sets the backup_path of this InlineObject.

        The backup path. If this is not set, a new internal path will be generated.  # noqa: E501

        :param backup_path: The backup_path of this InlineObject.  # noqa: E501
        :type: str
        """

        self._backup_path = backup_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject):
            return True

        return self.to_dict() != other.to_dict()
