# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class NonCodeMetricsEntry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'path': 'str',
        'content': 'str',
        'time': 'float',
        'count': 'int',
        'assessment': 'dict(str, int)'
    }

    attribute_map = {
        'path': 'path',
        'content': 'content',
        'time': 'time',
        'count': 'count',
        'assessment': 'assessment'
    }

    def __init__(self, path=None, content=None, time=None, count=None, assessment=None, local_vars_configuration=None):  # noqa: E501
        """NonCodeMetricsEntry - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._path = None
        self._content = None
        self._time = None
        self._count = None
        self._assessment = None
        self.discriminator = None

        if path is not None:
            self.path = path
        if content is not None:
            self.content = content
        if time is not None:
            self.time = time
        if count is not None:
            self.count = count
        if assessment is not None:
            self.assessment = assessment

    @property
    def path(self):
        """Gets the path of this NonCodeMetricsEntry.  # noqa: E501


        :return: The path of this NonCodeMetricsEntry.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this NonCodeMetricsEntry.


        :param path: The path of this NonCodeMetricsEntry.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def content(self):
        """Gets the content of this NonCodeMetricsEntry.  # noqa: E501


        :return: The content of this NonCodeMetricsEntry.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this NonCodeMetricsEntry.


        :param content: The content of this NonCodeMetricsEntry.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def time(self):
        """Gets the time of this NonCodeMetricsEntry.  # noqa: E501


        :return: The time of this NonCodeMetricsEntry.  # noqa: E501
        :rtype: float
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this NonCodeMetricsEntry.


        :param time: The time of this NonCodeMetricsEntry.  # noqa: E501
        :type: float
        """

        self._time = time

    @property
    def count(self):
        """Gets the count of this NonCodeMetricsEntry.  # noqa: E501


        :return: The count of this NonCodeMetricsEntry.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this NonCodeMetricsEntry.


        :param count: The count of this NonCodeMetricsEntry.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def assessment(self):
        """Gets the assessment of this NonCodeMetricsEntry.  # noqa: E501


        :return: The assessment of this NonCodeMetricsEntry.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._assessment

    @assessment.setter
    def assessment(self, assessment):
        """Sets the assessment of this NonCodeMetricsEntry.


        :param assessment: The assessment of this NonCodeMetricsEntry.  # noqa: E501
        :type: dict(str, int)
        """

        self._assessment = assessment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NonCodeMetricsEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NonCodeMetricsEntry):
            return True

        return self.to_dict() != other.to_dict()
