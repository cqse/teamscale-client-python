# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ClusteredTestDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uniform_path': 'str',
        'source_path': 'str',
        'content': 'str',
        'last_changed_timestamp': 'int',
        'cluster_id': 'str'
    }

    attribute_map = {
        'uniform_path': 'uniformPath',
        'source_path': 'sourcePath',
        'content': 'content',
        'last_changed_timestamp': 'lastChangedTimestamp',
        'cluster_id': 'clusterId'
    }

    def __init__(self, uniform_path=None, source_path=None, content=None, last_changed_timestamp=None, cluster_id=None, local_vars_configuration=None):  # noqa: E501
        """ClusteredTestDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uniform_path = None
        self._source_path = None
        self._content = None
        self._last_changed_timestamp = None
        self._cluster_id = None
        self.discriminator = None

        if uniform_path is not None:
            self.uniform_path = uniform_path
        if source_path is not None:
            self.source_path = source_path
        if content is not None:
            self.content = content
        if last_changed_timestamp is not None:
            self.last_changed_timestamp = last_changed_timestamp
        if cluster_id is not None:
            self.cluster_id = cluster_id

    @property
    def uniform_path(self):
        """Gets the uniform_path of this ClusteredTestDetails.  # noqa: E501


        :return: The uniform_path of this ClusteredTestDetails.  # noqa: E501
        :rtype: str
        """
        return self._uniform_path

    @uniform_path.setter
    def uniform_path(self, uniform_path):
        """Sets the uniform_path of this ClusteredTestDetails.


        :param uniform_path: The uniform_path of this ClusteredTestDetails.  # noqa: E501
        :type: str
        """

        self._uniform_path = uniform_path

    @property
    def source_path(self):
        """Gets the source_path of this ClusteredTestDetails.  # noqa: E501


        :return: The source_path of this ClusteredTestDetails.  # noqa: E501
        :rtype: str
        """
        return self._source_path

    @source_path.setter
    def source_path(self, source_path):
        """Sets the source_path of this ClusteredTestDetails.


        :param source_path: The source_path of this ClusteredTestDetails.  # noqa: E501
        :type: str
        """

        self._source_path = source_path

    @property
    def content(self):
        """Gets the content of this ClusteredTestDetails.  # noqa: E501


        :return: The content of this ClusteredTestDetails.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ClusteredTestDetails.


        :param content: The content of this ClusteredTestDetails.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def last_changed_timestamp(self):
        """Gets the last_changed_timestamp of this ClusteredTestDetails.  # noqa: E501


        :return: The last_changed_timestamp of this ClusteredTestDetails.  # noqa: E501
        :rtype: int
        """
        return self._last_changed_timestamp

    @last_changed_timestamp.setter
    def last_changed_timestamp(self, last_changed_timestamp):
        """Sets the last_changed_timestamp of this ClusteredTestDetails.


        :param last_changed_timestamp: The last_changed_timestamp of this ClusteredTestDetails.  # noqa: E501
        :type: int
        """

        self._last_changed_timestamp = last_changed_timestamp

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ClusteredTestDetails.  # noqa: E501


        :return: The cluster_id of this ClusteredTestDetails.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ClusteredTestDetails.


        :param cluster_id: The cluster_id of this ClusteredTestDetails.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusteredTestDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClusteredTestDetails):
            return True

        return self.to_dict() != other.to_dict()
