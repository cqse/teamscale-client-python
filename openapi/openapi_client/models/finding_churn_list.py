# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class FindingChurnList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'commit': 'CommitDescriptor',
        'added_findings': 'list[TrackedFinding]',
        'findings_added_in_branch': 'list[TrackedFinding]',
        'findings_in_changed_code': 'list[TrackedFinding]',
        'removed_findings': 'list[TrackedFinding]',
        'findings_removed_in_branch': 'list[TrackedFinding]'
    }

    attribute_map = {
        'commit': 'commit',
        'added_findings': 'addedFindings',
        'findings_added_in_branch': 'findingsAddedInBranch',
        'findings_in_changed_code': 'findingsInChangedCode',
        'removed_findings': 'removedFindings',
        'findings_removed_in_branch': 'findingsRemovedInBranch'
    }

    def __init__(self, commit=None, added_findings=None, findings_added_in_branch=None, findings_in_changed_code=None, removed_findings=None, findings_removed_in_branch=None, local_vars_configuration=None):  # noqa: E501
        """FindingChurnList - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._commit = None
        self._added_findings = None
        self._findings_added_in_branch = None
        self._findings_in_changed_code = None
        self._removed_findings = None
        self._findings_removed_in_branch = None
        self.discriminator = None

        if commit is not None:
            self.commit = commit
        if added_findings is not None:
            self.added_findings = added_findings
        if findings_added_in_branch is not None:
            self.findings_added_in_branch = findings_added_in_branch
        if findings_in_changed_code is not None:
            self.findings_in_changed_code = findings_in_changed_code
        if removed_findings is not None:
            self.removed_findings = removed_findings
        if findings_removed_in_branch is not None:
            self.findings_removed_in_branch = findings_removed_in_branch

    @property
    def commit(self):
        """Gets the commit of this FindingChurnList.  # noqa: E501


        :return: The commit of this FindingChurnList.  # noqa: E501
        :rtype: CommitDescriptor
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this FindingChurnList.


        :param commit: The commit of this FindingChurnList.  # noqa: E501
        :type: CommitDescriptor
        """

        self._commit = commit

    @property
    def added_findings(self):
        """Gets the added_findings of this FindingChurnList.  # noqa: E501


        :return: The added_findings of this FindingChurnList.  # noqa: E501
        :rtype: list[TrackedFinding]
        """
        return self._added_findings

    @added_findings.setter
    def added_findings(self, added_findings):
        """Sets the added_findings of this FindingChurnList.


        :param added_findings: The added_findings of this FindingChurnList.  # noqa: E501
        :type: list[TrackedFinding]
        """

        self._added_findings = added_findings

    @property
    def findings_added_in_branch(self):
        """Gets the findings_added_in_branch of this FindingChurnList.  # noqa: E501


        :return: The findings_added_in_branch of this FindingChurnList.  # noqa: E501
        :rtype: list[TrackedFinding]
        """
        return self._findings_added_in_branch

    @findings_added_in_branch.setter
    def findings_added_in_branch(self, findings_added_in_branch):
        """Sets the findings_added_in_branch of this FindingChurnList.


        :param findings_added_in_branch: The findings_added_in_branch of this FindingChurnList.  # noqa: E501
        :type: list[TrackedFinding]
        """

        self._findings_added_in_branch = findings_added_in_branch

    @property
    def findings_in_changed_code(self):
        """Gets the findings_in_changed_code of this FindingChurnList.  # noqa: E501


        :return: The findings_in_changed_code of this FindingChurnList.  # noqa: E501
        :rtype: list[TrackedFinding]
        """
        return self._findings_in_changed_code

    @findings_in_changed_code.setter
    def findings_in_changed_code(self, findings_in_changed_code):
        """Sets the findings_in_changed_code of this FindingChurnList.


        :param findings_in_changed_code: The findings_in_changed_code of this FindingChurnList.  # noqa: E501
        :type: list[TrackedFinding]
        """

        self._findings_in_changed_code = findings_in_changed_code

    @property
    def removed_findings(self):
        """Gets the removed_findings of this FindingChurnList.  # noqa: E501


        :return: The removed_findings of this FindingChurnList.  # noqa: E501
        :rtype: list[TrackedFinding]
        """
        return self._removed_findings

    @removed_findings.setter
    def removed_findings(self, removed_findings):
        """Sets the removed_findings of this FindingChurnList.


        :param removed_findings: The removed_findings of this FindingChurnList.  # noqa: E501
        :type: list[TrackedFinding]
        """

        self._removed_findings = removed_findings

    @property
    def findings_removed_in_branch(self):
        """Gets the findings_removed_in_branch of this FindingChurnList.  # noqa: E501


        :return: The findings_removed_in_branch of this FindingChurnList.  # noqa: E501
        :rtype: list[TrackedFinding]
        """
        return self._findings_removed_in_branch

    @findings_removed_in_branch.setter
    def findings_removed_in_branch(self, findings_removed_in_branch):
        """Sets the findings_removed_in_branch of this FindingChurnList.


        :param findings_removed_in_branch: The findings_removed_in_branch of this FindingChurnList.  # noqa: E501
        :type: list[TrackedFinding]
        """

        self._findings_removed_in_branch = findings_removed_in_branch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FindingChurnList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FindingChurnList):
            return True

        return self.to_dict() != other.to_dict()
