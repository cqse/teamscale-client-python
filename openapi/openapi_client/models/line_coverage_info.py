# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class LineCoverageInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'timestamp': 'int',
        'is_method_accurate': 'bool',
        'fully_covered_lines': 'list[int]',
        'partially_covered_lines': 'list[int]',
        'uncovered_lines': 'list[int]'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'is_method_accurate': 'isMethodAccurate',
        'fully_covered_lines': 'fullyCoveredLines',
        'partially_covered_lines': 'partiallyCoveredLines',
        'uncovered_lines': 'uncoveredLines'
    }

    def __init__(self, timestamp=None, is_method_accurate=None, fully_covered_lines=None, partially_covered_lines=None, uncovered_lines=None, local_vars_configuration=None):  # noqa: E501
        """LineCoverageInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._timestamp = None
        self._is_method_accurate = None
        self._fully_covered_lines = None
        self._partially_covered_lines = None
        self._uncovered_lines = None
        self.discriminator = None

        if timestamp is not None:
            self.timestamp = timestamp
        if is_method_accurate is not None:
            self.is_method_accurate = is_method_accurate
        if fully_covered_lines is not None:
            self.fully_covered_lines = fully_covered_lines
        if partially_covered_lines is not None:
            self.partially_covered_lines = partially_covered_lines
        if uncovered_lines is not None:
            self.uncovered_lines = uncovered_lines

    @property
    def timestamp(self):
        """Gets the timestamp of this LineCoverageInfo.  # noqa: E501


        :return: The timestamp of this LineCoverageInfo.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this LineCoverageInfo.


        :param timestamp: The timestamp of this LineCoverageInfo.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def is_method_accurate(self):
        """Gets the is_method_accurate of this LineCoverageInfo.  # noqa: E501


        :return: The is_method_accurate of this LineCoverageInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_method_accurate

    @is_method_accurate.setter
    def is_method_accurate(self, is_method_accurate):
        """Sets the is_method_accurate of this LineCoverageInfo.


        :param is_method_accurate: The is_method_accurate of this LineCoverageInfo.  # noqa: E501
        :type: bool
        """

        self._is_method_accurate = is_method_accurate

    @property
    def fully_covered_lines(self):
        """Gets the fully_covered_lines of this LineCoverageInfo.  # noqa: E501


        :return: The fully_covered_lines of this LineCoverageInfo.  # noqa: E501
        :rtype: list[int]
        """
        return self._fully_covered_lines

    @fully_covered_lines.setter
    def fully_covered_lines(self, fully_covered_lines):
        """Sets the fully_covered_lines of this LineCoverageInfo.


        :param fully_covered_lines: The fully_covered_lines of this LineCoverageInfo.  # noqa: E501
        :type: list[int]
        """

        self._fully_covered_lines = fully_covered_lines

    @property
    def partially_covered_lines(self):
        """Gets the partially_covered_lines of this LineCoverageInfo.  # noqa: E501


        :return: The partially_covered_lines of this LineCoverageInfo.  # noqa: E501
        :rtype: list[int]
        """
        return self._partially_covered_lines

    @partially_covered_lines.setter
    def partially_covered_lines(self, partially_covered_lines):
        """Sets the partially_covered_lines of this LineCoverageInfo.


        :param partially_covered_lines: The partially_covered_lines of this LineCoverageInfo.  # noqa: E501
        :type: list[int]
        """

        self._partially_covered_lines = partially_covered_lines

    @property
    def uncovered_lines(self):
        """Gets the uncovered_lines of this LineCoverageInfo.  # noqa: E501


        :return: The uncovered_lines of this LineCoverageInfo.  # noqa: E501
        :rtype: list[int]
        """
        return self._uncovered_lines

    @uncovered_lines.setter
    def uncovered_lines(self, uncovered_lines):
        """Sets the uncovered_lines of this LineCoverageInfo.


        :param uncovered_lines: The uncovered_lines of this LineCoverageInfo.  # noqa: E501
        :type: list[int]
        """

        self._uncovered_lines = uncovered_lines

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LineCoverageInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LineCoverageInfo):
            return True

        return self.to_dict() != other.to_dict()
