# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class FindingsSummaryTypeIdInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type_id_name': 'str',
        'count': 'int',
        'count_red': 'int'
    }

    attribute_map = {
        'type_id_name': 'typeIdName',
        'count': 'count',
        'count_red': 'countRed'
    }

    def __init__(self, type_id_name=None, count=None, count_red=None, local_vars_configuration=None):  # noqa: E501
        """FindingsSummaryTypeIdInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type_id_name = None
        self._count = None
        self._count_red = None
        self.discriminator = None

        if type_id_name is not None:
            self.type_id_name = type_id_name
        if count is not None:
            self.count = count
        if count_red is not None:
            self.count_red = count_red

    @property
    def type_id_name(self):
        """Gets the type_id_name of this FindingsSummaryTypeIdInfo.  # noqa: E501


        :return: The type_id_name of this FindingsSummaryTypeIdInfo.  # noqa: E501
        :rtype: str
        """
        return self._type_id_name

    @type_id_name.setter
    def type_id_name(self, type_id_name):
        """Sets the type_id_name of this FindingsSummaryTypeIdInfo.


        :param type_id_name: The type_id_name of this FindingsSummaryTypeIdInfo.  # noqa: E501
        :type: str
        """

        self._type_id_name = type_id_name

    @property
    def count(self):
        """Gets the count of this FindingsSummaryTypeIdInfo.  # noqa: E501


        :return: The count of this FindingsSummaryTypeIdInfo.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this FindingsSummaryTypeIdInfo.


        :param count: The count of this FindingsSummaryTypeIdInfo.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def count_red(self):
        """Gets the count_red of this FindingsSummaryTypeIdInfo.  # noqa: E501


        :return: The count_red of this FindingsSummaryTypeIdInfo.  # noqa: E501
        :rtype: int
        """
        return self._count_red

    @count_red.setter
    def count_red(self, count_red):
        """Sets the count_red of this FindingsSummaryTypeIdInfo.


        :param count_red: The count_red of this FindingsSummaryTypeIdInfo.  # noqa: E501
        :type: int
        """

        self._count_red = count_red

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FindingsSummaryTypeIdInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FindingsSummaryTypeIdInfo):
            return True

        return self.to_dict() != other.to_dict()
