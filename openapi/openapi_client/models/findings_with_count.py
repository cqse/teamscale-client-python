# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class FindingsWithCount(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'findings': 'list[TrackedFinding]',
        'non_blacklisted_findings_count': 'int',
        'tolerated_findings_count': 'int',
        'false_positives_count': 'int'
    }

    attribute_map = {
        'findings': 'findings',
        'non_blacklisted_findings_count': 'nonBlacklistedFindingsCount',
        'tolerated_findings_count': 'toleratedFindingsCount',
        'false_positives_count': 'falsePositivesCount'
    }

    def __init__(self, findings=None, non_blacklisted_findings_count=None, tolerated_findings_count=None, false_positives_count=None, local_vars_configuration=None):  # noqa: E501
        """FindingsWithCount - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._findings = None
        self._non_blacklisted_findings_count = None
        self._tolerated_findings_count = None
        self._false_positives_count = None
        self.discriminator = None

        if findings is not None:
            self.findings = findings
        if non_blacklisted_findings_count is not None:
            self.non_blacklisted_findings_count = non_blacklisted_findings_count
        if tolerated_findings_count is not None:
            self.tolerated_findings_count = tolerated_findings_count
        if false_positives_count is not None:
            self.false_positives_count = false_positives_count

    @property
    def findings(self):
        """Gets the findings of this FindingsWithCount.  # noqa: E501


        :return: The findings of this FindingsWithCount.  # noqa: E501
        :rtype: list[TrackedFinding]
        """
        return self._findings

    @findings.setter
    def findings(self, findings):
        """Sets the findings of this FindingsWithCount.


        :param findings: The findings of this FindingsWithCount.  # noqa: E501
        :type: list[TrackedFinding]
        """

        self._findings = findings

    @property
    def non_blacklisted_findings_count(self):
        """Gets the non_blacklisted_findings_count of this FindingsWithCount.  # noqa: E501


        :return: The non_blacklisted_findings_count of this FindingsWithCount.  # noqa: E501
        :rtype: int
        """
        return self._non_blacklisted_findings_count

    @non_blacklisted_findings_count.setter
    def non_blacklisted_findings_count(self, non_blacklisted_findings_count):
        """Sets the non_blacklisted_findings_count of this FindingsWithCount.


        :param non_blacklisted_findings_count: The non_blacklisted_findings_count of this FindingsWithCount.  # noqa: E501
        :type: int
        """

        self._non_blacklisted_findings_count = non_blacklisted_findings_count

    @property
    def tolerated_findings_count(self):
        """Gets the tolerated_findings_count of this FindingsWithCount.  # noqa: E501


        :return: The tolerated_findings_count of this FindingsWithCount.  # noqa: E501
        :rtype: int
        """
        return self._tolerated_findings_count

    @tolerated_findings_count.setter
    def tolerated_findings_count(self, tolerated_findings_count):
        """Sets the tolerated_findings_count of this FindingsWithCount.


        :param tolerated_findings_count: The tolerated_findings_count of this FindingsWithCount.  # noqa: E501
        :type: int
        """

        self._tolerated_findings_count = tolerated_findings_count

    @property
    def false_positives_count(self):
        """Gets the false_positives_count of this FindingsWithCount.  # noqa: E501


        :return: The false_positives_count of this FindingsWithCount.  # noqa: E501
        :rtype: int
        """
        return self._false_positives_count

    @false_positives_count.setter
    def false_positives_count(self, false_positives_count):
        """Sets the false_positives_count of this FindingsWithCount.


        :param false_positives_count: The false_positives_count of this FindingsWithCount.  # noqa: E501
        :type: int
        """

        self._false_positives_count = false_positives_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FindingsWithCount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FindingsWithCount):
            return True

        return self.to_dict() != other.to_dict()
