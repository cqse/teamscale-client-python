# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ProjectInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'alias': 'str',
        'parent_project_id': 'str',
        'description': 'str',
        'creation_timestamp': 'int',
        'deleting': 'bool',
        'reanalyzing': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'alias': 'alias',
        'parent_project_id': 'parentProjectId',
        'description': 'description',
        'creation_timestamp': 'creationTimestamp',
        'deleting': 'deleting',
        'reanalyzing': 'reanalyzing'
    }

    def __init__(self, id=None, name=None, alias=None, parent_project_id=None, description=None, creation_timestamp=None, deleting=None, reanalyzing=None, local_vars_configuration=None):  # noqa: E501
        """ProjectInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._alias = None
        self._parent_project_id = None
        self._description = None
        self._creation_timestamp = None
        self._deleting = None
        self._reanalyzing = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if alias is not None:
            self.alias = alias
        if parent_project_id is not None:
            self.parent_project_id = parent_project_id
        if description is not None:
            self.description = description
        if creation_timestamp is not None:
            self.creation_timestamp = creation_timestamp
        if deleting is not None:
            self.deleting = deleting
        if reanalyzing is not None:
            self.reanalyzing = reanalyzing

    @property
    def id(self):
        """Gets the id of this ProjectInfo.  # noqa: E501


        :return: The id of this ProjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectInfo.


        :param id: The id of this ProjectInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProjectInfo.  # noqa: E501


        :return: The name of this ProjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectInfo.


        :param name: The name of this ProjectInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def alias(self):
        """Gets the alias of this ProjectInfo.  # noqa: E501


        :return: The alias of this ProjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this ProjectInfo.


        :param alias: The alias of this ProjectInfo.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def parent_project_id(self):
        """Gets the parent_project_id of this ProjectInfo.  # noqa: E501


        :return: The parent_project_id of this ProjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._parent_project_id

    @parent_project_id.setter
    def parent_project_id(self, parent_project_id):
        """Sets the parent_project_id of this ProjectInfo.


        :param parent_project_id: The parent_project_id of this ProjectInfo.  # noqa: E501
        :type: str
        """

        self._parent_project_id = parent_project_id

    @property
    def description(self):
        """Gets the description of this ProjectInfo.  # noqa: E501


        :return: The description of this ProjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectInfo.


        :param description: The description of this ProjectInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this ProjectInfo.  # noqa: E501


        :return: The creation_timestamp of this ProjectInfo.  # noqa: E501
        :rtype: int
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this ProjectInfo.


        :param creation_timestamp: The creation_timestamp of this ProjectInfo.  # noqa: E501
        :type: int
        """

        self._creation_timestamp = creation_timestamp

    @property
    def deleting(self):
        """Gets the deleting of this ProjectInfo.  # noqa: E501


        :return: The deleting of this ProjectInfo.  # noqa: E501
        :rtype: bool
        """
        return self._deleting

    @deleting.setter
    def deleting(self, deleting):
        """Sets the deleting of this ProjectInfo.


        :param deleting: The deleting of this ProjectInfo.  # noqa: E501
        :type: bool
        """

        self._deleting = deleting

    @property
    def reanalyzing(self):
        """Gets the reanalyzing of this ProjectInfo.  # noqa: E501


        :return: The reanalyzing of this ProjectInfo.  # noqa: E501
        :rtype: bool
        """
        return self._reanalyzing

    @reanalyzing.setter
    def reanalyzing(self, reanalyzing):
        """Sets the reanalyzing of this ProjectInfo.


        :param reanalyzing: The reanalyzing of this ProjectInfo.  # noqa: E501
        :type: bool
        """

        self._reanalyzing = reanalyzing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectInfo):
            return True

        return self.to_dict() != other.to_dict()
