# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AnalysisProfile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'languages': 'list[str]',
        'tools': 'list[str]',
        'options': 'dict(str, str)',
        'quality_indicators': 'list[QualityIndicator]',
        'description': 'str'
    }

    attribute_map = {
        'name': 'name',
        'languages': 'languages',
        'tools': 'tools',
        'options': 'options',
        'quality_indicators': 'qualityIndicators',
        'description': 'description'
    }

    def __init__(self, name=None, languages=None, tools=None, options=None, quality_indicators=None, description=None, local_vars_configuration=None):  # noqa: E501
        """AnalysisProfile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._languages = None
        self._tools = None
        self._options = None
        self._quality_indicators = None
        self._description = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if languages is not None:
            self.languages = languages
        if tools is not None:
            self.tools = tools
        if options is not None:
            self.options = options
        if quality_indicators is not None:
            self.quality_indicators = quality_indicators
        if description is not None:
            self.description = description

    @property
    def name(self):
        """Gets the name of this AnalysisProfile.  # noqa: E501


        :return: The name of this AnalysisProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnalysisProfile.


        :param name: The name of this AnalysisProfile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def languages(self):
        """Gets the languages of this AnalysisProfile.  # noqa: E501


        :return: The languages of this AnalysisProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this AnalysisProfile.


        :param languages: The languages of this AnalysisProfile.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["JAVA", "CPP", "OPEN_CL", "RUST", "VB", "PL1", "COBOL", "CS", "ABAP", "ABAP_DDIC", "ADA", "TEXT", "XML", "SQLSCRIPT", "HANA_VIEW", "PLSQL", "PYTHON", "TSQL", "MATLAB", "PHP", "RUBY", "JAVASCRIPT", "MTEXT", "JPL", "LINE", "DELPHI", "IEC61131", "FORTRAN", "XTEND", "SWIFT", "OCAML", "OSCRIPT", "GROOVY", "NL_REQUIREMENTS", "NL_TESTS", "SIMULINK", "GOSU", "KOTLIN", "OBJECTIVE_C", "JAVADOC", "GO"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(languages).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `languages` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(languages) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._languages = languages

    @property
    def tools(self):
        """Gets the tools of this AnalysisProfile.  # noqa: E501


        :return: The tools of this AnalysisProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._tools

    @tools.setter
    def tools(self, tools):
        """Sets the tools of this AnalysisProfile.


        :param tools: The tools of this AnalysisProfile.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["TEAMSCALE", "FINDBUGS", "STYLECOP", "RAEX", "CS_COMPILER", "FXCOP", "SPCOP", "CLANG", "CLANG_TIDY", "PC_LINT", "PYLINT", "CODE_INSPECTOR", "JACOCO", "COBERTURA", "GCOV", "LCOV", "COVERAGE_PY", "VISUALSTUDIO_TESTCOVERAGE", "DOT_COVER", "XR_BABOON", "CTC_TESTCOVERAGE", "BULLSEYE_TESTCOVERAGE", "SAP_SCOV", "ESLINT", "TSLINT", "ABAPLINT", "CUSTOM", "ROSLYN", "CPPCHECK", "CUSTOM_METRICS", "PROFILER_COVERAGE", "PLSQL_HPROF", "ASTREE", "MODEL_ADVISOR", "SONAR_LINT", "PARASOFT_CPP_TEST", "MYPY"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(tools).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `tools` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(tools) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._tools = tools

    @property
    def options(self):
        """Gets the options of this AnalysisProfile.  # noqa: E501


        :return: The options of this AnalysisProfile.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this AnalysisProfile.


        :param options: The options of this AnalysisProfile.  # noqa: E501
        :type: dict(str, str)
        """

        self._options = options

    @property
    def quality_indicators(self):
        """Gets the quality_indicators of this AnalysisProfile.  # noqa: E501


        :return: The quality_indicators of this AnalysisProfile.  # noqa: E501
        :rtype: list[QualityIndicator]
        """
        return self._quality_indicators

    @quality_indicators.setter
    def quality_indicators(self, quality_indicators):
        """Sets the quality_indicators of this AnalysisProfile.


        :param quality_indicators: The quality_indicators of this AnalysisProfile.  # noqa: E501
        :type: list[QualityIndicator]
        """

        self._quality_indicators = quality_indicators

    @property
    def description(self):
        """Gets the description of this AnalysisProfile.  # noqa: E501


        :return: The description of this AnalysisProfile.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AnalysisProfile.


        :param description: The description of this AnalysisProfile.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalysisProfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnalysisProfile):
            return True

        return self.to_dict() != other.to_dict()
