# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class JavaScriptSourceMap(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file': 'str',
        'sources': 'list[str]',
        'mappings': 'str',
        'decoded_mapping': 'list[list[Base64DecodedSegment]]'
    }

    attribute_map = {
        'file': 'file',
        'sources': 'sources',
        'mappings': 'mappings',
        'decoded_mapping': 'decodedMapping'
    }

    def __init__(self, file=None, sources=None, mappings=None, decoded_mapping=None, local_vars_configuration=None):  # noqa: E501
        """JavaScriptSourceMap - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file = None
        self._sources = None
        self._mappings = None
        self._decoded_mapping = None
        self.discriminator = None

        if file is not None:
            self.file = file
        if sources is not None:
            self.sources = sources
        if mappings is not None:
            self.mappings = mappings
        if decoded_mapping is not None:
            self.decoded_mapping = decoded_mapping

    @property
    def file(self):
        """Gets the file of this JavaScriptSourceMap.  # noqa: E501


        :return: The file of this JavaScriptSourceMap.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this JavaScriptSourceMap.


        :param file: The file of this JavaScriptSourceMap.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def sources(self):
        """Gets the sources of this JavaScriptSourceMap.  # noqa: E501


        :return: The sources of this JavaScriptSourceMap.  # noqa: E501
        :rtype: list[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this JavaScriptSourceMap.


        :param sources: The sources of this JavaScriptSourceMap.  # noqa: E501
        :type: list[str]
        """

        self._sources = sources

    @property
    def mappings(self):
        """Gets the mappings of this JavaScriptSourceMap.  # noqa: E501


        :return: The mappings of this JavaScriptSourceMap.  # noqa: E501
        :rtype: str
        """
        return self._mappings

    @mappings.setter
    def mappings(self, mappings):
        """Sets the mappings of this JavaScriptSourceMap.


        :param mappings: The mappings of this JavaScriptSourceMap.  # noqa: E501
        :type: str
        """

        self._mappings = mappings

    @property
    def decoded_mapping(self):
        """Gets the decoded_mapping of this JavaScriptSourceMap.  # noqa: E501


        :return: The decoded_mapping of this JavaScriptSourceMap.  # noqa: E501
        :rtype: list[list[Base64DecodedSegment]]
        """
        return self._decoded_mapping

    @decoded_mapping.setter
    def decoded_mapping(self, decoded_mapping):
        """Sets the decoded_mapping of this JavaScriptSourceMap.


        :param decoded_mapping: The decoded_mapping of this JavaScriptSourceMap.  # noqa: E501
        :type: list[list[Base64DecodedSegment]]
        """

        self._decoded_mapping = decoded_mapping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JavaScriptSourceMap):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JavaScriptSourceMap):
            return True

        return self.to_dict() != other.to_dict()
