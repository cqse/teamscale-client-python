# coding: utf-8

"""
    Teamscale REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 6.1.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BackupImportParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'backup': 'list[object]',
        'backup_path': 'str',
        'shadow_mode': 'bool',
        'skip_project_creation': 'bool',
        'skip_project_validation': 'bool'
    }

    attribute_map = {
        'backup': 'backup',
        'backup_path': 'backup-path',
        'shadow_mode': 'shadow-mode',
        'skip_project_creation': 'skip-project-creation',
        'skip_project_validation': 'skip-project-validation'
    }

    def __init__(self, backup=None, backup_path=None, shadow_mode=None, skip_project_creation=None, skip_project_validation=None, local_vars_configuration=None):  # noqa: E501
        """BackupImportParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._backup = None
        self._backup_path = None
        self._shadow_mode = None
        self._skip_project_creation = None
        self._skip_project_validation = None
        self.discriminator = None

        if backup is not None:
            self.backup = backup
        if backup_path is not None:
            self.backup_path = backup_path
        if shadow_mode is not None:
            self.shadow_mode = shadow_mode
        if skip_project_creation is not None:
            self.skip_project_creation = skip_project_creation
        if skip_project_validation is not None:
            self.skip_project_validation = skip_project_validation

    @property
    def backup(self):
        """Gets the backup of this BackupImportParameters.  # noqa: E501

        The backups to import.  # noqa: E501

        :return: The backup of this BackupImportParameters.  # noqa: E501
        :rtype: list[object]
        """
        return self._backup

    @backup.setter
    def backup(self, backup):
        """Sets the backup of this BackupImportParameters.

        The backups to import.  # noqa: E501

        :param backup: The backup of this BackupImportParameters.  # noqa: E501
        :type: list[object]
        """

        self._backup = backup

    @property
    def backup_path(self):
        """Gets the backup_path of this BackupImportParameters.  # noqa: E501

        Path to the backup.  # noqa: E501

        :return: The backup_path of this BackupImportParameters.  # noqa: E501
        :rtype: str
        """
        return self._backup_path

    @backup_path.setter
    def backup_path(self, backup_path):
        """Sets the backup_path of this BackupImportParameters.

        Path to the backup.  # noqa: E501

        :param backup_path: The backup_path of this BackupImportParameters.  # noqa: E501
        :type: str
        """

        self._backup_path = backup_path

    @property
    def shadow_mode(self):
        """Gets the shadow_mode of this BackupImportParameters.  # noqa: E501

        Whether to enable shadow mode right after import.  # noqa: E501

        :return: The shadow_mode of this BackupImportParameters.  # noqa: E501
        :rtype: bool
        """
        return self._shadow_mode

    @shadow_mode.setter
    def shadow_mode(self, shadow_mode):
        """Sets the shadow_mode of this BackupImportParameters.

        Whether to enable shadow mode right after import.  # noqa: E501

        :param shadow_mode: The shadow_mode of this BackupImportParameters.  # noqa: E501
        :type: bool
        """

        self._shadow_mode = shadow_mode

    @property
    def skip_project_creation(self):
        """Gets the skip_project_creation of this BackupImportParameters.  # noqa: E501

        Whether to skip the project creation and only import backup data into existing projects.  # noqa: E501

        :return: The skip_project_creation of this BackupImportParameters.  # noqa: E501
        :rtype: bool
        """
        return self._skip_project_creation

    @skip_project_creation.setter
    def skip_project_creation(self, skip_project_creation):
        """Sets the skip_project_creation of this BackupImportParameters.

        Whether to skip the project creation and only import backup data into existing projects.  # noqa: E501

        :param skip_project_creation: The skip_project_creation of this BackupImportParameters.  # noqa: E501
        :type: bool
        """

        self._skip_project_creation = skip_project_creation

    @property
    def skip_project_validation(self):
        """Gets the skip_project_validation of this BackupImportParameters.  # noqa: E501

        Whether to skip the project validation on import  # noqa: E501

        :return: The skip_project_validation of this BackupImportParameters.  # noqa: E501
        :rtype: bool
        """
        return self._skip_project_validation

    @skip_project_validation.setter
    def skip_project_validation(self, skip_project_validation):
        """Sets the skip_project_validation of this BackupImportParameters.

        Whether to skip the project validation on import  # noqa: E501

        :param skip_project_validation: The skip_project_validation of this BackupImportParameters.  # noqa: E501
        :type: bool
        """

        self._skip_project_validation = skip_project_validation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupImportParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BackupImportParameters):
            return True

        return self.to_dict() != other.to_dict()
